{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{set divide clone}, :name phzr.point, :imports nil, :requires {phzr.impl.utils.core phzr.impl.utils.core, ex phzr.impl.extend, phzr.impl.extend phzr.impl.extend, cljsjs.phaser cljsjs.phaser}, :uses {clj->phaser phzr.impl.utils.core, phaser->clj phzr.impl.utils.core}, :defs {dot {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 295, :column 7, :end-line 295, :end-column 10, :arglists (quote ([point a])), :doc "The dot product of this and another Point object.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * a (Phaser.Point) - The Point object to get the dot product combined with this Point.\n\n  Returns:  number - The result."}, :name phzr.point/dot, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 10, :method-params ([point a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 295, :end-line 295, :max-fixed-arity 2, :fn-var true, :arglists (quote ([point a])), :doc "The dot product of this and another Point object.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * a (Phaser.Point) - The Point object to get the dot product combined with this Point.\n\n  Returns:  number - The result."}, set {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 725, :column 7, :end-line 725, :end-column 10, :arglists (quote ([point x] [point x y])), :doc "Sets the `x` and `y` values of this Point object to the given values.\n  If you omit the `y` value then the `x` value will be applied to both, for example:\n  `Point.set(2)` is the same as `Point.set(2, 2)`\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * x (number) - The horizontal value of this point.\n    * y (number) {optional} - The vertical value of this point. If not given the x value will be used in its place.\n\n  Returns:  Phaser.Point - This Point object. Useful for chaining method calls.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([point x] [point x y]), :arglists ([point x] [point x y]), :arglists-meta (nil nil)}}, :name phzr.point/set, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([point x] [point x y]), :arglists ([point x] [point x y]), :arglists-meta (nil nil)}, :method-params ([point x] [point x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 725, :end-line 725, :max-fixed-arity 3, :fn-var true, :arglists ([point x] [point x y]), :doc "Sets the `x` and `y` values of this Point object to the given values.\n  If you omit the `y` value then the `x` value will be applied to both, for example:\n  `Point.set(2)` is the same as `Point.set(2, 2)`\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * x (number) - The horizontal value of this point.\n    * y (number) {optional} - The vertical value of this point. If not given the x value will be used in its place.\n\n  Returns:  Phaser.Point - This Point object. Useful for chaining method calls."}, distance {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 219, :column 7, :end-line 219, :end-column 15, :arglists (quote ([point dest] [point dest round])), :doc "Returns the distance of this Point object to the given object (can be a Circle, Point or anything with x/y properties)\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * dest (object) - The target object. Must have visible x and y properties that represent the center of the object.\n    * round (boolean) {optional} - Round the distance to the nearest integer (default false).\n\n  Returns:  number - The distance between this Point object and the destination Point object.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([point dest] [point dest round]), :arglists ([point dest] [point dest round]), :arglists-meta (nil nil)}}, :name phzr.point/distance, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([point dest] [point dest round]), :arglists ([point dest] [point dest round]), :arglists-meta (nil nil)}, :method-params ([point dest] [point dest round]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 3, :fn-var true, :arglists ([point dest] [point dest round]), :doc "Returns the distance of this Point object to the given object (can be a Circle, Point or anything with x/y properties)\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * dest (object) - The target object. Must have visible x and y properties that represent the center of the object.\n    * round (boolean) {optional} - Round the distance to the nearest integer (default false).\n\n  Returns:  number - The distance between this Point object and the destination Point object."}, add- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 39, :column 7, :end-line 39, :end-column 11, :arglists (quote ([a b] [a b out])), :doc "Adds the coordinates of two points together to create a new point.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [a b out]), :arglists ([a b] [a b out]), :arglists-meta (nil nil)}}, :name phzr.point/add-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [a b out]), :arglists ([a b] [a b out]), :arglists-meta (nil nil)}, :method-params ([a b] [a b out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 3, :fn-var true, :arglists ([a b] [a b out]), :doc "Adds the coordinates of two points together to create a new point.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object."}, normal-right-hand- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 485, :column 7, :end-line 485, :end-column 25, :arglists (quote ([a] [a out])), :doc "Right-hand normalize (make unit length) a Point.\n\n  Parameters:\n    * a (Phaser.Point) - The Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([a] [a out]), :arglists ([a] [a out]), :arglists-meta (nil nil)}}, :name phzr.point/normal-right-hand-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([a] [a out]), :arglists ([a] [a out]), :arglists-meta (nil nil)}, :method-params ([a] [a out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 485, :end-line 485, :max-fixed-arity 2, :fn-var true, :arglists ([a] [a out]), :doc "Right-hand normalize (make unit length) a Point.\n\n  Parameters:\n    * a (Phaser.Point) - The Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object."}, subtract {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 780, :column 7, :end-line 780, :end-column 15, :arglists (quote ([point x y])), :doc "Subtracts the given x and y values from this Point.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * x (number) - The value to subtract from Point.x.\n    * y (number) - The value to subtract from Point.y.\n\n  Returns:  Phaser.Point - This Point object. Useful for chaining method calls."}, :name phzr.point/subtract, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 15, :method-params ([point x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 780, :end-line 780, :max-fixed-arity 3, :fn-var true, :arglists (quote ([point x y])), :doc "Subtracts the given x and y values from this Point.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * x (number) - The value to subtract from Point.x.\n    * y (number) - The value to subtract from Point.y.\n\n  Returns:  Phaser.Point - This Point object. Useful for chaining method calls."}, add {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 24, :column 7, :end-line 24, :end-column 10, :arglists (quote ([point x y])), :doc "Adds the given x and y values to this Point.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * x (number) - The value to add to Point.x.\n    * y (number) - The value to add to Point.y.\n\n  Returns:  Phaser.Point - This Point object. Useful for chaining method calls."}, :name phzr.point/add, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 10, :method-params ([point x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 3, :fn-var true, :arglists (quote ([point x y])), :doc "Adds the given x and y values to this Point.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * x (number) - The value to add to Point.x.\n    * y (number) - The value to add to Point.y.\n\n  Returns:  Phaser.Point - This Point object. Useful for chaining method calls."}, clamp {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 119, :column 7, :end-line 119, :end-column 12, :arglists (quote ([point min max])), :doc "Clamps this Point object values to be between the given min and max.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * min (number) - The minimum value to clamp this Point to.\n    * max (number) - The maximum value to clamp this Point to.\n\n  Returns:  Phaser.Point - This Point object."}, :name phzr.point/clamp, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 12, :method-params ([point min max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 3, :fn-var true, :arglists (quote ([point min max])), :doc "Clamps this Point object values to be between the given min and max.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * min (number) - The minimum value to clamp this Point to.\n    * max (number) - The maximum value to clamp this Point to.\n\n  Returns:  Phaser.Point - This Point object."}, floor {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 335, :column 7, :end-line 335, :end-column 12, :arglists (quote ([point])), :doc "Math.floor() both the x and y properties of this Point.\n\n  Returns:  Phaser.Point - This Point object."}, :name phzr.point/floor, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 12, :method-params ([point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 1, :fn-var true, :arglists (quote ([point])), :doc "Math.floor() both the x and y properties of this Point.\n\n  Returns:  Phaser.Point - This Point object."}, cross {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 206, :column 7, :end-line 206, :end-column 12, :arglists (quote ([point a])), :doc "The cross product of this and another Point object.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * a (Phaser.Point) - The Point object to get the cross product combined with this Point.\n\n  Returns:  number - The result."}, :name phzr.point/cross, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 12, :method-params ([point a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 2, :fn-var true, :arglists (quote ([point a])), :doc "The cross product of this and another Point object.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * a (Phaser.Point) - The Point object to get the cross product combined with this Point.\n\n  Returns:  number - The result."}, ->Point {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 7, :column 7, :end-line 7, :end-column 14, :arglists (quote ([] [x] [x y])), :doc "A Point object represents a location in a two-dimensional coordinate system, where x represents the horizontal axis and y represents the vertical axis.\n  The following code creates a point at (0,0):\n  `var myPoint = new Phaser.Point();`\n  You can also use them as 2D Vectors and you'll find different vector related methods in this class.\n\n  Parameters:\n    * x (number) {optional} - The horizontal position of this Point.\n    * y (number) {optional} - The vertical position of this Point.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y]), :arglists-meta (nil nil nil)}}, :name phzr.point/->Point, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [x] [x y]), :arglists ([] [x] [x y]), :arglists-meta (nil nil nil)}, :method-params ([] [x] [x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists ([] [x] [x y]), :doc "A Point object represents a location in a two-dimensional coordinate system, where x represents the horizontal axis and y represents the vertical axis.\n  The following code creates a point at (0,0):\n  `var myPoint = new Phaser.Point();`\n  You can also use them as 2D Vectors and you'll find different vector related methods in this class.\n\n  Parameters:\n    * x (number) {optional} - The horizontal position of this Point.\n    * y (number) {optional} - The vertical position of this Point."}, normalize {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 503, :column 7, :end-line 503, :end-column 16, :arglists (quote ([point])), :doc "Alters the Point object so that its length is 1, but it retains the same direction.\n\n  Returns:  Phaser.Point - This Point object."}, :name phzr.point/normalize, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 16, :method-params ([point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 503, :end-line 503, :max-fixed-arity 1, :fn-var true, :arglists (quote ([point])), :doc "Alters the Point object so that its length is 1, but it retains the same direction.\n\n  Returns:  Phaser.Point - This Point object."}, distance- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 238, :column 7, :end-line 238, :end-column 16, :arglists (quote ([a b] [a b round])), :doc "Returns the euclidian distance of this Point object to the given object (can be a Circle, Point or anything with x/y properties).\n\n  Parameters:\n    * a (object) - The target object. Must have visible x and y properties that represent the center of the object.\n    * b (object) - The target object. Must have visible x and y properties that represent the center of the object.\n    * round (boolean) {optional} - Round the distance to the nearest integer.\n\n  Returns:  number - The distance between this Point object and the destination Point object.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [a b round]), :arglists ([a b] [a b round]), :arglists-meta (nil nil)}}, :name phzr.point/distance-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [a b round]), :arglists ([a b] [a b round]), :arglists-meta (nil nil)}, :method-params ([a b] [a b round]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 3, :fn-var true, :arglists ([a b] [a b round]), :doc "Returns the euclidian distance of this Point object to the given object (can be a Circle, Point or anything with x/y properties).\n\n  Parameters:\n    * a (object) - The target object. Must have visible x and y properties that represent the center of the object.\n    * b (object) - The target object. Must have visible x and y properties that represent the center of the object.\n    * round (boolean) {optional} - Round the distance to the nearest integer.\n\n  Returns:  number - The distance between this Point object and the destination Point object."}, rotate- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 657, :column 7, :end-line 657, :end-column 14, :arglists (quote ([a x y angle] [a x y angle as-degrees] [a x y angle as-degrees distance])), :doc "Rotates a Point object, or any object with exposed x/y properties, around the given coordinates by\n  the angle specified. If the angle between the point and coordinates was 45 deg and the angle argument\n  is 45 deg then the resulting angle will be 90 deg, as the angle argument is added to the current angle.\n\n  The distance allows you to specify a distance constraint for the rotation between the point and the \n  coordinates. If none is given the distance between the two is calculated and used.\n\n  Parameters:\n    * a (Phaser.Point) - The Point object to rotate.\n    * x (number) - The x coordinate of the anchor point\n    * y (number) - The y coordinate of the anchor point\n    * angle (number) - The angle in radians (unless asDegrees is true) to rotate the Point by.\n    * as-degrees (boolean) {optional} - Is the given angle in radians (false) or degrees (true)?\n    * distance (number) {optional} - An optional distance constraint between the Point and the anchor.\n\n  Returns:  Phaser.Point - The modified point object.", :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([a x y angle] [a x y angle as-degrees] [a x y angle as-degrees distance]), :arglists ([a x y angle] [a x y angle as-degrees] [a x y angle as-degrees distance]), :arglists-meta (nil nil nil)}}, :name phzr.point/rotate-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([a x y angle] [a x y angle as-degrees] [a x y angle as-degrees distance]), :arglists ([a x y angle] [a x y angle as-degrees] [a x y angle as-degrees distance]), :arglists-meta (nil nil nil)}, :method-params ([a x y angle] [a x y angle as-degrees] [a x y angle as-degrees distance]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 657, :end-line 657, :max-fixed-arity 6, :fn-var true, :arglists ([a x y angle] [a x y angle as-degrees] [a x y angle as-degrees distance]), :doc "Rotates a Point object, or any object with exposed x/y properties, around the given coordinates by\n  the angle specified. If the angle between the point and coordinates was 45 deg and the angle argument\n  is 45 deg then the resulting angle will be 90 deg, as the angle argument is added to the current angle.\n\n  The distance allows you to specify a distance constraint for the rotation between the point and the \n  coordinates. If none is given the distance between the two is calculated and used.\n\n  Parameters:\n    * a (Phaser.Point) - The Point object to rotate.\n    * x (number) - The x coordinate of the anchor point\n    * y (number) - The y coordinate of the anchor point\n    * angle (number) - The angle in radians (unless asDegrees is true) to rotate the Point by.\n    * as-degrees (boolean) {optional} - Is the given angle in radians (false) or degrees (true)?\n    * distance (number) {optional} - An optional distance constraint between the Point and the anchor.\n\n  Returns:  Phaser.Point - The modified point object."}, invert {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 383, :column 7, :end-line 383, :end-column 13, :arglists (quote ([point])), :doc "Inverts the x and y values of this Point\n\n  Returns:  Phaser.Point - This Point object."}, :name phzr.point/invert, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 13, :method-params ([point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 383, :end-line 383, :max-fixed-arity 1, :fn-var true, :arglists (quote ([point])), :doc "Inverts the x and y values of this Point\n\n  Returns:  Phaser.Point - This Point object."}, ceil {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 93, :column 7, :end-line 93, :end-column 11, :arglists (quote ([point])), :doc "Math.ceil() both the x and y properties of this Point.\n\n  Returns:  Phaser.Point - This Point object."}, :name phzr.point/ceil, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 11, :method-params ([point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([point])), :doc "Math.ceil() both the x and y properties of this Point.\n\n  Returns:  Phaser.Point - This Point object."}, negative- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 459, :column 7, :end-line 459, :end-column 16, :arglists (quote ([a] [a out])), :doc "Creates a negative Point.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([a] [a out]), :arglists ([a] [a out]), :arglists-meta (nil nil)}}, :name phzr.point/negative-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([a] [a out]), :arglists ([a] [a out]), :arglists-meta (nil nil)}, :method-params ([a] [a out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 459, :end-line 459, :max-fixed-arity 2, :fn-var true, :arglists ([a] [a out]), :doc "Creates a negative Point.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object."}, is-zero {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 391, :column 7, :end-line 391, :end-column 14, :arglists (quote ([point])), :doc "Determine if this point is at 0,0.\n\n  Returns:  boolean - True if this Point is 0,0, otherwise false."}, :name phzr.point/is-zero, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 14, :method-params ([point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 391, :end-line 391, :max-fixed-arity 1, :fn-var true, :arglists (quote ([point])), :doc "Determine if this point is at 0,0.\n\n  Returns:  boolean - True if this Point is 0,0, otherwise false."}, get-magnitude {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 343, :column 7, :end-line 343, :end-column 20, :arglists (quote ([point])), :doc "Calculates the length of the Point object.\n\n  Returns:  number - The length of the Point."}, :name phzr.point/get-magnitude, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 20, :method-params ([point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 343, :end-line 343, :max-fixed-arity 1, :fn-var true, :arglists (quote ([point])), :doc "Calculates the length of the Point object.\n\n  Returns:  number - The length of the Point."}, divide {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 259, :column 7, :end-line 259, :end-column 13, :arglists (quote ([point x y])), :doc "Divides Point.x and Point.y by the given x and y values.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * x (number) - The value to divide Point.x by.\n    * y (number) - The value to divide Point.x by.\n\n  Returns:  Phaser.Point - This Point object. Useful for chaining method calls."}, :name phzr.point/divide, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 13, :method-params ([point x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 3, :fn-var true, :arglists (quote ([point x y])), :doc "Divides Point.x and Point.y by the given x and y values.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * x (number) - The value to divide Point.x by.\n    * y (number) - The value to divide Point.x by.\n\n  Returns:  Phaser.Point - This Point object. Useful for chaining method calls."}, multiply-add- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 435, :column 7, :end-line 435, :end-column 20, :arglists (quote ([a b s] [a b s out])), :doc "Adds two 2D Points together and multiplies the result by the given scalar.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n    * s (number) - The scaling value.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([a b s] [a b s out]), :arglists ([a b s] [a b s out]), :arglists-meta (nil nil)}}, :name phzr.point/multiply-add-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([a b s] [a b s out]), :arglists ([a b s] [a b s out]), :arglists-meta (nil nil)}, :method-params ([a b s] [a b s out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 435, :end-line 435, :max-fixed-arity 4, :fn-var true, :arglists ([a b s] [a b s out]), :doc "Adds two 2D Points together and multiplies the result by the given scalar.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n    * s (number) - The scaling value.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object."}, multiply- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 414, :column 7, :end-line 414, :end-column 16, :arglists (quote ([a b] [a b out])), :doc "Multiplies the coordinates of two points to create a new point.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [a b out]), :arglists ([a b] [a b out]), :arglists-meta (nil nil)}}, :name phzr.point/multiply-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [a b out]), :arglists ([a b] [a b out]), :arglists-meta (nil nil)}, :method-params ([a b] [a b out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 414, :end-line 414, :max-fixed-arity 3, :fn-var true, :arglists ([a b] [a b out]), :doc "Multiplies the coordinates of two points to create a new point.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object."}, perp {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 555, :column 7, :end-line 555, :end-column 11, :arglists (quote ([point])), :doc "Make this Point perpendicular (90 degrees rotation)\n\n  Returns:  Phaser.Point - This Point object."}, :name phzr.point/perp, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 11, :method-params ([point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 555, :end-line 555, :max-fixed-arity 1, :fn-var true, :arglists (quote ([point])), :doc "Make this Point perpendicular (90 degrees rotation)\n\n  Returns:  Phaser.Point - This Point object."}, clamp-y {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 149, :column 7, :end-line 149, :end-column 14, :arglists (quote ([point min max])), :doc "Clamps the y value of this Point to be between the given min and max\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * min (number) - The minimum value to clamp this Point to.\n    * max (number) - The maximum value to clamp this Point to.\n\n  Returns:  Phaser.Point - This Point object."}, :name phzr.point/clamp-y, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 14, :method-params ([point min max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 3, :fn-var true, :arglists (quote ([point min max])), :doc "Clamps the y value of this Point to be between the given min and max\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * min (number) - The minimum value to clamp this Point to.\n    * max (number) - The maximum value to clamp this Point to.\n\n  Returns:  Phaser.Point - This Point object."}, centroid- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 101, :column 7, :end-line 101, :end-column 16, :arglists (quote ([points] [points out])), :doc "Calculates centroid (or midpoint) from an array of points. If only one point is provided, that point is returned.\n\n  Parameters:\n    * points (Array.<Phaser.Point>) - The array of one or more points.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([points] [points out]), :arglists ([points] [points out]), :arglists-meta (nil nil)}}, :name phzr.point/centroid-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([points] [points out]), :arglists ([points] [points out]), :arglists-meta (nil nil)}, :method-params ([points] [points out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists ([points] [points out]), :doc "Calculates centroid (or midpoint) from an array of points. If only one point is provided, that point is returned.\n\n  Parameters:\n    * points (Array.<Phaser.Point>) - The array of one or more points.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object."}, to-string {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 816, :column 7, :end-line 816, :end-column 16, :arglists (quote ([point])), :doc "Returns a string representation of this object.\n\n  Returns:  string - A string representation of the instance."}, :name phzr.point/to-string, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 16, :method-params ([point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 816, :end-line 816, :max-fixed-arity 1, :fn-var true, :arglists (quote ([point])), :doc "Returns a string representation of this object.\n\n  Returns:  string - A string representation of the instance."}, set-to {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 759, :column 7, :end-line 759, :end-column 13, :arglists (quote ([point x] [point x y])), :doc "Sets the `x` and `y` values of this Point object to the given values.\n  If you omit the `y` value then the `x` value will be applied to both, for example:\n  `Point.setTo(2)` is the same as `Point.setTo(2, 2)`\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * x (number) - The horizontal value of this point.\n    * y (number) {optional} - The vertical value of this point. If not given the x value will be used in its place.\n\n  Returns:  Phaser.Point - This Point object. Useful for chaining method calls.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([point x] [point x y]), :arglists ([point x] [point x y]), :arglists-meta (nil nil)}}, :name phzr.point/set-to, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([point x] [point x y]), :arglists ([point x] [point x y]), :arglists-meta (nil nil)}, :method-params ([point x] [point x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 759, :end-line 759, :max-fixed-arity 3, :fn-var true, :arglists ([point x] [point x y]), :doc "Sets the `x` and `y` values of this Point object to the given values.\n  If you omit the `y` value then the `x` value will be applied to both, for example:\n  `Point.setTo(2)` is the same as `Point.setTo(2, 2)`\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * x (number) - The horizontal value of this point.\n    * y (number) {optional} - The vertical value of this point. If not given the x value will be used in its place.\n\n  Returns:  Phaser.Point - This Point object. Useful for chaining method calls."}, normal-right-hand {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 477, :column 7, :end-line 477, :end-column 24, :arglists (quote ([point])), :doc "Right-hand normalize (make unit length) this Point.\n\n  Returns:  Phaser.Point - This Point object."}, :name phzr.point/normal-right-hand, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 24, :method-params ([point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 477, :end-line 477, :max-fixed-arity 1, :fn-var true, :arglists (quote ([point])), :doc "Right-hand normalize (make unit length) this Point.\n\n  Returns:  Phaser.Point - This Point object."}, project-unit- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 602, :column 7, :end-line 602, :end-column 20, :arglists (quote ([a b] [a b out])), :doc "Project two Points onto a Point of unit length.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [a b out]), :arglists ([a b] [a b out]), :arglists-meta (nil nil)}}, :name phzr.point/project-unit-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [a b out]), :arglists ([a b] [a b out]), :arglists-meta (nil nil)}, :method-params ([a b] [a b out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 602, :end-line 602, :max-fixed-arity 3, :fn-var true, :arglists ([a b] [a b out]), :doc "Project two Points onto a Point of unit length.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object."}, set-magnitude {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 746, :column 7, :end-line 746, :end-column 20, :arglists (quote ([point magnitude])), :doc "Alters the length of the Point without changing the direction.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * magnitude (number) - The desired magnitude of the resulting Point.\n\n  Returns:  Phaser.Point - This Point object."}, :name phzr.point/set-magnitude, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 20, :method-params ([point magnitude]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 746, :end-line 746, :max-fixed-arity 2, :fn-var true, :arglists (quote ([point magnitude])), :doc "Alters the length of the Point without changing the direction.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * magnitude (number) - The desired magnitude of the resulting Point.\n\n  Returns:  Phaser.Point - This Point object."}, interpolate- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 359, :column 7, :end-line 359, :end-column 19, :arglists (quote ([a b f] [a b f out])), :doc "Interpolates the two given Points, based on the `f` value (between 0 and 1) and returns a new Point.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n    * f (number) - The level of interpolation between the two points. Indicates where the new point will be, along the line between pt1 and pt2. If f=1, pt1 is returned; if f=0, pt2 is returned.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([a b f] [a b f out]), :arglists ([a b f] [a b f out]), :arglists-meta (nil nil)}}, :name phzr.point/interpolate-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([a b f] [a b f out]), :arglists ([a b f] [a b f out]), :arglists-meta (nil nil)}, :method-params ([a b f] [a b f out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 359, :end-line 359, :max-fixed-arity 4, :fn-var true, :arglists ([a b f] [a b f out]), :doc "Interpolates the two given Points, based on the `f` value (between 0 and 1) and returns a new Point.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n    * f (number) - The level of interpolation between the two points. Indicates where the new point will be, along the line between pt1 and pt2. If f=1, pt1 is returned; if f=0, pt2 is returned.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object."}, copy-from {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 180, :column 7, :end-line 180, :end-column 16, :arglists (quote ([point source])), :doc "Copies the x and y properties from any given object to this Point.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * source (any) - The object to copy from.\n\n  Returns:  Phaser.Point - This Point object."}, :name phzr.point/copy-from, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 16, :method-params ([point source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 2, :fn-var true, :arglists (quote ([point source])), :doc "Copies the x and y properties from any given object to this Point.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * source (any) - The object to copy from.\n\n  Returns:  Phaser.Point - This Point object."}, equals {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 308, :column 7, :end-line 308, :end-column 13, :arglists (quote ([point a])), :doc "Determines whether the given objects x/y values are equal to this Point object.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * a (Phaser.Point | any) - The object to compare with this Point.\n\n  Returns:  boolean - A value of true if the x and y points are equal, otherwise false."}, :name phzr.point/equals, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 13, :method-params ([point a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 308, :end-line 308, :max-fixed-arity 2, :fn-var true, :arglists (quote ([point a])), :doc "Determines whether the given objects x/y values are equal to this Point object.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * a (Phaser.Point | any) - The object to compare with this Point.\n\n  Returns:  boolean - A value of true if the x and y points are equal, otherwise false."}, angle {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 60, :column 7, :end-line 60, :end-column 12, :arglists (quote ([point a] [point a as-degrees])), :doc "Returns the angle between this Point object and another object with public x and y properties.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * a (Phaser.Point | any) - The object to get the angle from this Point to.\n    * as-degrees (boolean) {optional} - Is the given angle in radians (false) or degrees (true)?\n\n  Returns:  number - The angle between the two objects.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([point a] [point a as-degrees]), :arglists ([point a] [point a as-degrees]), :arglists-meta (nil nil)}}, :name phzr.point/angle, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([point a] [point a as-degrees]), :arglists ([point a] [point a as-degrees]), :arglists-meta (nil nil)}, :method-params ([point a] [point a as-degrees]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 3, :fn-var true, :arglists ([point a] [point a as-degrees]), :doc "Returns the angle between this Point object and another object with public x and y properties.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * a (Phaser.Point | any) - The object to get the angle from this Point to.\n    * as-degrees (boolean) {optional} - Is the given angle in radians (false) or degrees (true)?\n\n  Returns:  number - The angle between the two objects."}, project- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 581, :column 7, :end-line 581, :end-column 15, :arglists (quote ([a b] [a b out])), :doc "Project two Points onto another Point.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [a b out]), :arglists ([a b] [a b out]), :arglists-meta (nil nil)}}, :name phzr.point/project-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [a b out]), :arglists ([a b] [a b out]), :arglists-meta (nil nil)}, :method-params ([a b] [a b out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 581, :end-line 581, :max-fixed-arity 3, :fn-var true, :arglists ([a b] [a b out]), :doc "Project two Points onto another Point.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object."}, copy-to {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 193, :column 7, :end-line 193, :end-column 14, :arglists (quote ([point dest])), :doc "Copies the x and y properties from this Point to any given object.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * dest (any) - The object to copy to.\n\n  Returns:  object - The dest object."}, :name phzr.point/copy-to, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 14, :method-params ([point dest]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 2, :fn-var true, :arglists (quote ([point dest])), :doc "Copies the x and y properties from this Point to any given object.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * dest (any) - The object to copy to.\n\n  Returns:  object - The dest object."}, perp- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 563, :column 7, :end-line 563, :end-column 12, :arglists (quote ([a] [a out])), :doc "Return a perpendicular vector (90 degrees rotation)\n\n  Parameters:\n    * a (Phaser.Point) - The Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([a] [a out]), :arglists ([a] [a out]), :arglists-meta (nil nil)}}, :name phzr.point/perp-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([a] [a out]), :arglists ([a] [a out]), :arglists-meta (nil nil)}, :method-params ([a] [a out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 563, :end-line 563, :max-fixed-arity 2, :fn-var true, :arglists ([a] [a out]), :doc "Return a perpendicular vector (90 degrees rotation)\n\n  Parameters:\n    * a (Phaser.Point) - The Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object."}, equals- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 321, :column 7, :end-line 321, :end-column 14, :arglists (quote ([a b])), :doc "Determines whether the two given Point objects are equal. They are considered equal if they have the same x and y values.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n\n  Returns:  boolean - A value of true if the Points are equal, otherwise false."}, :name phzr.point/equals-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 14, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 321, :end-line 321, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Determines whether the two given Point objects are equal. They are considered equal if they have the same x and y values.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n\n  Returns:  boolean - A value of true if the Points are equal, otherwise false."}, angle- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 79, :column 7, :end-line 79, :end-column 13, :arglists (quote ([a b])), :doc "Returns the angle between two Point objects.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n\n  Returns:  number - The angle between the two Points."}, :name phzr.point/angle-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 13, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Returns the angle between two Point objects.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n\n  Returns:  number - The angle between the two Points."}, divide- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 274, :column 7, :end-line 274, :end-column 14, :arglists (quote ([a b] [a b out])), :doc "Divides the coordinates of two points to create a new point.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [a b out]), :arglists ([a b] [a b out]), :arglists-meta (nil nil)}}, :name phzr.point/divide-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [a b out]), :arglists ([a b] [a b out]), :arglists-meta (nil nil)}, :method-params ([a b] [a b out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 274, :end-line 274, :max-fixed-arity 3, :fn-var true, :arglists ([a b] [a b out]), :doc "Divides the coordinates of two points to create a new point.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object."}, get-magnitude-sq {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 351, :column 7, :end-line 351, :end-column 23, :arglists (quote ([point])), :doc "Calculates the length squared of the Point object.\n\n  Returns:  number - The length ^ 2 of the Point."}, :name phzr.point/get-magnitude-sq, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 23, :method-params ([point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 351, :end-line 351, :max-fixed-arity 1, :fn-var true, :arglists (quote ([point])), :doc "Calculates the length squared of the Point object.\n\n  Returns:  number - The length ^ 2 of the Point."}, subtract- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 795, :column 7, :end-line 795, :end-column 16, :arglists (quote ([a b] [a b out])), :doc "Subtracts the coordinates of two points to create a new point.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [a b out]), :arglists ([a b] [a b out]), :arglists-meta (nil nil)}}, :name phzr.point/subtract-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([a b] [a b out]), :arglists ([a b] [a b out]), :arglists-meta (nil nil)}, :method-params ([a b] [a b out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 795, :end-line 795, :max-fixed-arity 3, :fn-var true, :arglists ([a b] [a b out]), :doc "Subtracts the coordinates of two points to create a new point.\n\n  Parameters:\n    * a (Phaser.Point) - The first Point object.\n    * b (Phaser.Point) - The second Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object."}, clone {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 164, :column 7, :end-line 164, :end-column 12, :arglists (quote ([point] [point output])), :doc "Creates a copy of the given Point.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * output (Phaser.Point) {optional} - Optional Point object. If given the values will be set into this object, otherwise a brand new Point object will be created and returned.\n\n  Returns:  Phaser.Point - The new Point object.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([point] [point output]), :arglists ([point] [point output]), :arglists-meta (nil nil)}}, :name phzr.point/clone, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([point] [point output]), :arglists ([point] [point output]), :arglists-meta (nil nil)}, :method-params ([point] [point output]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 2, :fn-var true, :arglists ([point] [point output]), :doc "Creates a copy of the given Point.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * output (Phaser.Point) {optional} - Optional Point object. If given the values will be set into this object, otherwise a brand new Point object will be created and returned.\n\n  Returns:  Phaser.Point - The new Point object."}, normalize- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 511, :column 7, :end-line 511, :end-column 17, :arglists (quote ([a] [a out])), :doc "Normalize (make unit length) a Point.\n\n  Parameters:\n    * a (Phaser.Point) - The Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([a] [a out]), :arglists ([a] [a out]), :arglists-meta (nil nil)}}, :name phzr.point/normalize-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([a] [a out]), :arglists ([a] [a out]), :arglists-meta (nil nil)}, :method-params ([a] [a out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 511, :end-line 511, :max-fixed-arity 2, :fn-var true, :arglists ([a] [a out]), :doc "Normalize (make unit length) a Point.\n\n  Parameters:\n    * a (Phaser.Point) - The Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object."}, rperp {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 699, :column 7, :end-line 699, :end-column 12, :arglists (quote ([point])), :doc "Make this Point perpendicular (-90 degrees rotation)\n\n  Returns:  Phaser.Point - This Point object."}, :name phzr.point/rperp, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 12, :method-params ([point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 699, :end-line 699, :max-fixed-arity 1, :fn-var true, :arglists (quote ([point])), :doc "Make this Point perpendicular (-90 degrees rotation)\n\n  Returns:  Phaser.Point - This Point object."}, clamp-x {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 134, :column 7, :end-line 134, :end-column 14, :arglists (quote ([point min max])), :doc "Clamps the x value of this Point to be between the given min and max.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * min (number) - The minimum value to clamp this Point to.\n    * max (number) - The maximum value to clamp this Point to.\n\n  Returns:  Phaser.Point - This Point object."}, :name phzr.point/clamp-x, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 14, :method-params ([point min max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 3, :fn-var true, :arglists (quote ([point min max])), :doc "Clamps the x value of this Point to be between the given min and max.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * min (number) - The minimum value to clamp this Point to.\n    * max (number) - The maximum value to clamp this Point to.\n\n  Returns:  Phaser.Point - This Point object."}, parse- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 529, :column 7, :end-line 529, :end-column 13, :arglists (quote ([obj] [obj x-prop] [obj x-prop y-prop])), :doc "Parses an object for x and/or y properties and returns a new Phaser.Point with matching values.\n  If the object doesn't contain those properties a Point with x/y of zero will be returned.\n\n  Parameters:\n    * obj (object) - The object to parse.\n    * x-prop (string) {optional} - The property used to set the Point.x value.\n    * y-prop (string) {optional} - The property used to set the Point.y value.\n\n  Returns:  Phaser.Point - The new Point object.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([obj] [obj x-prop] [obj x-prop y-prop]), :arglists ([obj] [obj x-prop] [obj x-prop y-prop]), :arglists-meta (nil nil nil)}}, :name phzr.point/parse-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([obj] [obj x-prop] [obj x-prop y-prop]), :arglists ([obj] [obj x-prop] [obj x-prop y-prop]), :arglists-meta (nil nil nil)}, :method-params ([obj] [obj x-prop] [obj x-prop y-prop]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 529, :end-line 529, :max-fixed-arity 3, :fn-var true, :arglists ([obj] [obj x-prop] [obj x-prop y-prop]), :doc "Parses an object for x and/or y properties and returns a new Phaser.Point with matching values.\n  If the object doesn't contain those properties a Point with x/y of zero will be returned.\n\n  Parameters:\n    * obj (object) - The object to parse.\n    * x-prop (string) {optional} - The property used to set the Point.x value.\n    * y-prop (string) {optional} - The property used to set the Point.y value.\n\n  Returns:  Phaser.Point - The new Point object."}, rotate {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 623, :column 7, :end-line 623, :end-column 13, :arglists (quote ([point x y angle] [point x y angle as-degrees] [point x y angle as-degrees distance])), :doc "Rotates this Point around the x/y coordinates given to the desired angle.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * x (number) - The x coordinate of the anchor point.\n    * y (number) - The y coordinate of the anchor point.\n    * angle (number) - The angle in radians (unless asDegrees is true) to rotate the Point to.\n    * as-degrees (boolean) {optional} - Is the given angle in radians (false) or degrees (true)?\n    * distance (number) {optional} - An optional distance constraint between the Point and the anchor.\n\n  Returns:  Phaser.Point - The modified point object.", :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([point x y angle] [point x y angle as-degrees] [point x y angle as-degrees distance]), :arglists ([point x y angle] [point x y angle as-degrees] [point x y angle as-degrees distance]), :arglists-meta (nil nil nil)}}, :name phzr.point/rotate, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([point x y angle] [point x y angle as-degrees] [point x y angle as-degrees distance]), :arglists ([point x y angle] [point x y angle as-degrees] [point x y angle as-degrees distance]), :arglists-meta (nil nil nil)}, :method-params ([point x y angle] [point x y angle as-degrees] [point x y angle as-degrees distance]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 623, :end-line 623, :max-fixed-arity 6, :fn-var true, :arglists ([point x y angle] [point x y angle as-degrees] [point x y angle as-degrees distance]), :doc "Rotates this Point around the x/y coordinates given to the desired angle.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * x (number) - The x coordinate of the anchor point.\n    * y (number) - The y coordinate of the anchor point.\n    * angle (number) - The angle in radians (unless asDegrees is true) to rotate the Point to.\n    * as-degrees (boolean) {optional} - Is the given angle in radians (false) or degrees (true)?\n    * distance (number) {optional} - An optional distance constraint between the Point and the anchor.\n\n  Returns:  Phaser.Point - The modified point object."}, multiply {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 399, :column 7, :end-line 399, :end-column 15, :arglists (quote ([point x y])), :doc "Multiplies Point.x and Point.y by the given x and y values. Sometimes known as `Scale`.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * x (number) - The value to multiply Point.x by.\n    * y (number) - The value to multiply Point.x by.\n\n  Returns:  Phaser.Point - This Point object. Useful for chaining method calls."}, :name phzr.point/multiply, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 15, :method-params ([point x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 399, :end-line 399, :max-fixed-arity 3, :fn-var true, :arglists (quote ([point x y])), :doc "Multiplies Point.x and Point.y by the given x and y values. Sometimes known as `Scale`.\n\n  Parameters:\n    * point (Phaser.Point) - Targeted instance for method\n    * x (number) - The value to multiply Point.x by.\n    * y (number) - The value to multiply Point.x by.\n\n  Returns:  Phaser.Point - This Point object. Useful for chaining method calls."}, rperp- {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/point.cljs", :line 707, :column 7, :end-line 707, :end-column 13, :arglists (quote ([a] [a out])), :doc "Return a perpendicular vector (-90 degrees rotation)\n\n  Parameters:\n    * a (Phaser.Point) - The Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([a] [a out]), :arglists ([a] [a out]), :arglists-meta (nil nil)}}, :name phzr.point/rperp-, :variadic false, :file "resources/public/js/compiled/out/phzr/point.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([a] [a out]), :arglists ([a] [a out]), :arglists-meta (nil nil)}, :method-params ([a] [a out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 707, :end-line 707, :max-fixed-arity 2, :fn-var true, :arglists ([a] [a out]), :doc "Return a perpendicular vector (-90 degrees rotation)\n\n  Parameters:\n    * a (Phaser.Point) - The Point object.\n    * out (Phaser.Point) {optional} - Optional Point to store the value in, if not supplied a new Point object will be created.\n\n  Returns:  Phaser.Point - The new Point object."}}, :require-macros nil, :doc nil}