{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{remove}, :name phzr.signal, :imports nil, :requires {phzr.impl.utils.core phzr.impl.utils.core, ex phzr.impl.extend, phzr.impl.extend phzr.impl.extend, cljsjs.phaser cljsjs.phaser}, :uses {clj->phaser phzr.impl.utils.core, phaser->clj phzr.impl.utils.core}, :defs {halt {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/signal.cljs", :line 138, :column 7, :end-line 138, :end-column 11, :arglists (quote ([signal])), :doc "Stop propagation of the event, blocking the dispatch to next listener on the queue.\n\n  This should be called only during event dispatch as calling it before/after dispatch won't affect another broadcast.\n  See {@link Phaser.Signal#active active} to enable/disable the signal entirely."}, :name phzr.signal/halt, :variadic false, :file "resources/public/js/compiled/out/phzr/signal.cljs", :end-column 11, :method-params ([signal]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists (quote ([signal])), :doc "Stop propagation of the event, blocking the dispatch to next listener on the queue.\n\n  This should be called only during event dispatch as calling it before/after dispatch won't affect another broadcast.\n  See {@link Phaser.Signal#active active} to enable/disable the signal entirely."}, add {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/signal.cljs", :line 14, :column 7, :end-line 14, :end-column 10, :arglists (quote ([signal listener] [signal listener listener-context] [signal listener listener-context priority] [signal listener listener-context priority args])), :doc "Add an event listener for this signal.\n\n  An event listener is a callback with a related context and priority.\n\n  You can optionally provide extra arguments which will be passed to the callback after any internal parameters.\n\n  For example: `Phaser.Key.onDown` when dispatched will send the Phaser.Key object that caused the signal as the first parameter.\n  Any arguments you've specified after `priority` will be sent as well:\n\n  `fireButton.onDown.add(shoot, this, 0, 'lazer', 100);`\n\n  When onDown dispatches it will call the `shoot` callback passing it: `Phaser.Key, 'lazer', 100`.\n\n  Where the first parameter is the one that Key.onDown dispatches internally and 'lazer', \n  and the value 100 were the custom arguments given in the call to 'add'.\n\n  Parameters:\n    * signal (Phaser.Signal) - Targeted instance for method\n    * listener (function) - The function to call when this Signal is dispatched.\n    * listener-context (object) {optional} - The context under which the listener will be executed (i.e. the object that should represent the `this` variable).\n    * priority (number) {optional} - The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added (default = 0)\n    * args (any) {optional} - Additional arguments to pass to the callback (listener) function. They will be appended after any arguments usually dispatched.\n\n  Returns:  Phaser.SignalBinding - An Object representing the binding between the Signal and listener.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([signal listener] [signal listener listener-context] [signal listener listener-context priority] [signal listener listener-context priority args]), :arglists ([signal listener] [signal listener listener-context] [signal listener listener-context priority] [signal listener listener-context priority args]), :arglists-meta (nil nil nil nil)}}, :name phzr.signal/add, :variadic false, :file "resources/public/js/compiled/out/phzr/signal.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([signal listener] [signal listener listener-context] [signal listener listener-context priority] [signal listener listener-context priority args]), :arglists ([signal listener] [signal listener listener-context] [signal listener listener-context priority] [signal listener listener-context priority args]), :arglists-meta (nil nil nil nil)}, :method-params ([signal listener] [signal listener listener-context] [signal listener listener-context priority] [signal listener listener-context priority args]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 5, :fn-var true, :arglists ([signal listener] [signal listener listener-context] [signal listener listener-context priority] [signal listener listener-context priority args]), :doc "Add an event listener for this signal.\n\n  An event listener is a callback with a related context and priority.\n\n  You can optionally provide extra arguments which will be passed to the callback after any internal parameters.\n\n  For example: `Phaser.Key.onDown` when dispatched will send the Phaser.Key object that caused the signal as the first parameter.\n  Any arguments you've specified after `priority` will be sent as well:\n\n  `fireButton.onDown.add(shoot, this, 0, 'lazer', 100);`\n\n  When onDown dispatches it will call the `shoot` callback passing it: `Phaser.Key, 'lazer', 100`.\n\n  Where the first parameter is the one that Key.onDown dispatches internally and 'lazer', \n  and the value 100 were the custom arguments given in the call to 'add'.\n\n  Parameters:\n    * signal (Phaser.Signal) - Targeted instance for method\n    * listener (function) - The function to call when this Signal is dispatched.\n    * listener-context (object) {optional} - The context under which the listener will be executed (i.e. the object that should represent the `this` variable).\n    * priority (number) {optional} - The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added (default = 0)\n    * args (any) {optional} - Additional arguments to pass to the callback (listener) function. They will be appended after any arguments usually dispatched.\n\n  Returns:  Phaser.SignalBinding - An Object representing the binding between the Signal and listener."}, remove {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/signal.cljs", :line 166, :column 7, :end-line 166, :end-column 13, :arglists (quote ([signal listener] [signal listener context])), :doc "Remove a single event listener.\n\n  Parameters:\n    * signal (Phaser.Signal) - Targeted instance for method\n    * listener (function) - Handler function that should be removed.\n    * context (object) {optional} - Execution context (since you can add the same handler multiple times if executing in a different context).\n\n  Returns:  function - Listener handler function.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([signal listener] [signal listener context]), :arglists ([signal listener] [signal listener context]), :arglists-meta (nil nil)}}, :name phzr.signal/remove, :variadic false, :file "resources/public/js/compiled/out/phzr/signal.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([signal listener] [signal listener context]), :arglists ([signal listener] [signal listener context]), :arglists-meta (nil nil)}, :method-params ([signal listener] [signal listener context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 3, :fn-var true, :arglists ([signal listener] [signal listener context]), :doc "Remove a single event listener.\n\n  Parameters:\n    * signal (Phaser.Signal) - Targeted instance for method\n    * listener (function) - Handler function that should be removed.\n    * context (object) {optional} - Execution context (since you can add the same handler multiple times if executing in a different context).\n\n  Returns:  function - Listener handler function."}, add-once {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/signal.cljs", :line 62, :column 7, :end-line 62, :end-column 15, :arglists (quote ([signal listener] [signal listener listener-context] [signal listener listener-context priority] [signal listener listener-context priority args])), :doc "Add a one-time listener - the listener is automatically removed after the first execution.\n\n  If there is as {@link Phaser.Signal#memorize memorized} event then it will be dispatched and\n  the listener will be removed immediately.\n\n  Parameters:\n    * signal (Phaser.Signal) - Targeted instance for method\n    * listener (function) - The function to call when this Signal is dispatched.\n    * listener-context (object) {optional} - The context under which the listener will be executed (i.e. the object that should represent the `this` variable).\n    * priority (number) {optional} - The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added (default = 0)\n    * args (any) {optional} - Additional arguments to pass to the callback (listener) function. They will be appended after any arguments usually dispatched.\n\n  Returns:  Phaser.SignalBinding - An Object representing the binding between the Signal and listener.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([signal listener] [signal listener listener-context] [signal listener listener-context priority] [signal listener listener-context priority args]), :arglists ([signal listener] [signal listener listener-context] [signal listener listener-context priority] [signal listener listener-context priority args]), :arglists-meta (nil nil nil nil)}}, :name phzr.signal/add-once, :variadic false, :file "resources/public/js/compiled/out/phzr/signal.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([signal listener] [signal listener listener-context] [signal listener listener-context priority] [signal listener listener-context priority args]), :arglists ([signal listener] [signal listener listener-context] [signal listener listener-context priority] [signal listener listener-context priority args]), :arglists-meta (nil nil nil nil)}, :method-params ([signal listener] [signal listener listener-context] [signal listener listener-context priority] [signal listener listener-context priority args]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 5, :fn-var true, :arglists ([signal listener] [signal listener listener-context] [signal listener listener-context priority] [signal listener listener-context priority args]), :doc "Add a one-time listener - the listener is automatically removed after the first execution.\n\n  If there is as {@link Phaser.Signal#memorize memorized} event then it will be dispatched and\n  the listener will be removed immediately.\n\n  Parameters:\n    * signal (Phaser.Signal) - Targeted instance for method\n    * listener (function) - The function to call when this Signal is dispatched.\n    * listener-context (object) {optional} - The context under which the listener will be executed (i.e. the object that should represent the `this` variable).\n    * priority (number) {optional} - The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added (default = 0)\n    * args (any) {optional} - Additional arguments to pass to the callback (listener) function. They will be appended after any arguments usually dispatched.\n\n  Returns:  Phaser.SignalBinding - An Object representing the binding between the Signal and listener."}, get-num-listeners {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/signal.cljs", :line 130, :column 7, :end-line 130, :end-column 24, :arglists (quote ([signal])), :doc "Gets the total number of listeners attached to this Signal.\n\n  Returns:  integer - Number of listeners attached to the Signal."}, :name phzr.signal/get-num-listeners, :variadic false, :file "resources/public/js/compiled/out/phzr/signal.cljs", :end-column 24, :method-params ([signal]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([signal])), :doc "Gets the total number of listeners attached to this Signal.\n\n  Returns:  integer - Number of listeners attached to the Signal."}, to-string {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/signal.cljs", :line 199, :column 7, :end-line 199, :end-column 16, :arglists (quote ([signal])), :doc "A string representation of the object.\n\n  Returns:  string - String representation of the object."}, :name phzr.signal/to-string, :variadic false, :file "resources/public/js/compiled/out/phzr/signal.cljs", :end-column 16, :method-params ([signal]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 1, :fn-var true, :arglists (quote ([signal])), :doc "A string representation of the object.\n\n  Returns:  string - String representation of the object."}, forget {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/signal.cljs", :line 124, :column 7, :end-line 124, :end-column 13, :arglists (quote ([signal])), :doc "Forget the currently {@link Phaser.Signal#memorize memorized} event, if any."}, :name phzr.signal/forget, :variadic false, :file "resources/public/js/compiled/out/phzr/signal.cljs", :end-column 13, :method-params ([signal]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([signal])), :doc "Forget the currently {@link Phaser.Signal#memorize memorized} event, if any."}, dispatch {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/signal.cljs", :line 99, :column 7, :end-line 99, :end-column 15, :arglists (quote ([signal] [signal params])), :doc "Dispatch / broadcast the event to all listeners.\n\n  To create an instance-bound dispatch for this Signal, use {@link Phaser.Signal#boundDispatch boundDispatch}.\n\n  Parameters:\n    * signal (Phaser.Signal) - Targeted instance for method\n    * params (any) {optional} - Parameters that should be passed to each handler.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([signal] [signal params]), :arglists ([signal] [signal params]), :arglists-meta (nil nil)}}, :name phzr.signal/dispatch, :variadic false, :file "resources/public/js/compiled/out/phzr/signal.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([signal] [signal params]), :arglists ([signal] [signal params]), :arglists-meta (nil nil)}, :method-params ([signal] [signal params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 2, :fn-var true, :arglists ([signal] [signal params]), :doc "Dispatch / broadcast the event to all listeners.\n\n  To create an instance-bound dispatch for this Signal, use {@link Phaser.Signal#boundDispatch boundDispatch}.\n\n  Parameters:\n    * signal (Phaser.Signal) - Targeted instance for method\n    * params (any) {optional} - Parameters that should be passed to each handler."}, ->Signal {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/signal.cljs", :line 7, :column 7, :end-line 7, :end-column 15, :arglists (quote ([])), :doc "A Signal is an event dispatch mechansim that supports broadcasting to multiple listeners.\n\n  Event listeners are uniquely identified by the listener/callback function and the context."}, :name phzr.signal/->Signal, :variadic false, :file "resources/public/js/compiled/out/phzr/signal.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "A Signal is an event dispatch mechansim that supports broadcasting to multiple listeners.\n\n  Event listeners are uniquely identified by the listener/callback function and the context."}, has {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/signal.cljs", :line 147, :column 7, :end-line 147, :end-column 10, :arglists (quote ([signal listener] [signal listener context])), :doc "Check if a specific listener is attached.\n\n  Parameters:\n    * signal (Phaser.Signal) - Targeted instance for method\n    * listener (function) - Signal handler function.\n    * context (object) {optional} - Context on which listener will be executed (object that should represent the `this` variable inside listener function).\n\n  Returns:  boolean - If Signal has the specified listener.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([signal listener] [signal listener context]), :arglists ([signal listener] [signal listener context]), :arglists-meta (nil nil)}}, :name phzr.signal/has, :variadic false, :file "resources/public/js/compiled/out/phzr/signal.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([signal listener] [signal listener context]), :arglists ([signal listener] [signal listener context]), :arglists-meta (nil nil)}, :method-params ([signal listener] [signal listener context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 3, :fn-var true, :arglists ([signal listener] [signal listener context]), :doc "Check if a specific listener is attached.\n\n  Parameters:\n    * signal (Phaser.Signal) - Targeted instance for method\n    * listener (function) - Signal handler function.\n    * context (object) {optional} - Context on which listener will be executed (object that should represent the `this` variable inside listener function).\n\n  Returns:  boolean - If Signal has the specified listener."}, remove-all {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/signal.cljs", :line 185, :column 7, :end-line 185, :end-column 17, :arglists (quote ([signal] [signal context])), :doc "Remove all event listeners.\n\n  Parameters:\n    * signal (Phaser.Signal) - Targeted instance for method\n    * context (object) {optional} - If specified only listeners for the given context will be removed.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([signal] [signal context]), :arglists ([signal] [signal context]), :arglists-meta (nil nil)}}, :name phzr.signal/remove-all, :variadic false, :file "resources/public/js/compiled/out/phzr/signal.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([signal] [signal context]), :arglists ([signal] [signal context]), :arglists-meta (nil nil)}, :method-params ([signal] [signal context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 2, :fn-var true, :arglists ([signal] [signal context]), :doc "Remove all event listeners.\n\n  Parameters:\n    * signal (Phaser.Signal) - Targeted instance for method\n    * context (object) {optional} - If specified only listeners for the given context will be removed."}, dispose {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/signal.cljs", :line 115, :column 7, :end-line 115, :end-column 14, :arglists (quote ([signal])), :doc "Dispose the signal - no more events can be dispatched.\n\n  This removes all event listeners and clears references to external objects.\n  Calling methods on a disposed objects results in undefined behavior."}, :name phzr.signal/dispose, :variadic false, :file "resources/public/js/compiled/out/phzr/signal.cljs", :end-column 14, :method-params ([signal]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([signal])), :doc "Dispose the signal - no more events can be dispatched.\n\n  This removes all event listeners and clears references to external objects.\n  Calling methods on a disposed objects results in undefined behavior."}}, :require-macros nil, :doc nil}