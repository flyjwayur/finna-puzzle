{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{filter}, :name phzr.game-object-factory, :imports nil, :requires {phzr.impl.utils.core phzr.impl.utils.core, ex phzr.impl.extend, phzr.impl.extend phzr.impl.extend, cljsjs.phaser cljsjs.phaser}, :uses {clj->phaser phzr.impl.utils.core, phaser->clj phzr.impl.utils.core}, :defs {audio {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 18, :column 7, :end-line 18, :end-column 12, :arglists (quote ([game-object-factory key] [game-object-factory key volume] [game-object-factory key volume loop] [game-object-factory key volume loop connect])), :doc "Creates a new Sound object.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * key (string) - The Game.cache key of the sound that this object will use.\n    * volume (number) {optional} - The volume at which the sound will be played.\n    * loop (boolean) {optional} - Whether or not the sound will loop.\n    * connect (boolean) {optional} - Controls if the created Sound object will connect to the master gainNode of the SoundManager when running under WebAudio.\n\n  Returns:  Phaser.Sound - The newly created sound object.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([game-object-factory key] [game-object-factory key volume] [game-object-factory key volume loop] [game-object-factory key volume loop connect]), :arglists ([game-object-factory key] [game-object-factory key volume] [game-object-factory key volume loop] [game-object-factory key volume loop connect]), :arglists-meta (nil nil nil nil)}}, :name phzr.game-object-factory/audio, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([game-object-factory key] [game-object-factory key volume] [game-object-factory key volume loop] [game-object-factory key volume loop connect]), :arglists ([game-object-factory key] [game-object-factory key volume] [game-object-factory key volume loop] [game-object-factory key volume loop connect]), :arglists-meta (nil nil nil nil)}, :method-params ([game-object-factory key] [game-object-factory key volume] [game-object-factory key volume loop] [game-object-factory key volume loop connect]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 5, :fn-var true, :arglists ([game-object-factory key] [game-object-factory key volume] [game-object-factory key volume loop] [game-object-factory key volume loop connect]), :doc "Creates a new Sound object.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * key (string) - The Game.cache key of the sound that this object will use.\n    * volume (number) {optional} - The volume at which the sound will be played.\n    * loop (boolean) {optional} - Whether or not the sound will loop.\n    * connect (boolean) {optional} - Controls if the created Sound object will connect to the master gainNode of the SoundManager when running under WebAudio.\n\n  Returns:  Phaser.Sound - The newly created sound object."}, emitter {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 318, :column 7, :end-line 318, :end-column 14, :arglists (quote ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y max-particles])), :doc "Create a new Emitter.\n\n  A particle emitter can be used for one-time explosions or for\n  continuous effects like rain and fire. All it really does is launch Particle objects out\n  at set intervals, and fixes their positions and velocities accordingly.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) {optional} - The x coordinate within the Emitter that the particles are emitted from.\n    * y (number) {optional} - The y coordinate within the Emitter that the particles are emitted from.\n    * max-particles (number) {optional} - The total number of particles in this emitter.\n\n  Returns:  Phaser.Particles.Arcade.Emitter - The newly created emitter object.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y max-particles]), :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y max-particles]), :arglists-meta (nil nil nil nil)}}, :name phzr.game-object-factory/emitter, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y max-particles]), :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y max-particles]), :arglists-meta (nil nil nil nil)}, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y max-particles]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 318, :end-line 318, :max-fixed-arity 4, :fn-var true, :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y max-particles]), :doc "Create a new Emitter.\n\n  A particle emitter can be used for one-time explosions or for\n  continuous effects like rain and fire. All it really does is launch Particle objects out\n  at set intervals, and fixes their positions and velocities accordingly.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) {optional} - The x coordinate within the Emitter that the particles are emitted from.\n    * y (number) {optional} - The y coordinate within the Emitter that the particles are emitted from.\n    * max-particles (number) {optional} - The total number of particles in this emitter.\n\n  Returns:  Phaser.Particles.Arcade.Emitter - The newly created emitter object."}, ->GameObjectFactory {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 7, :column 7, :end-line 7, :end-column 26, :arglists (quote ([game])), :doc "The GameObjectFactory is a quick way to create many common game objects\n  using {@linkcode Phaser.Game#add `game.add`}.\n\n  Created objects are _automatically added_ to the appropriate Manager, World, or manually specified parent Group.\n\n  Parameters:\n    * game (Phaser.Game) - A reference to the currently running game."}, :name phzr.game-object-factory/->GameObjectFactory, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 26, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game])), :doc "The GameObjectFactory is a quick way to create many common game objects\n  using {@linkcode Phaser.Game#add `game.add`}.\n\n  Created objects are _automatically added_ to the appropriate Manager, World, or manually specified parent Group.\n\n  Parameters:\n    * game (Phaser.Game) - A reference to the currently running game."}, plugin {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 544, :column 7, :end-line 544, :end-column 13, :arglists (quote ([game-object-factory plugin parameter])), :doc "Add a new Plugin into the PluginManager.\n\n  The Plugin must have 2 properties: `game` and `parent`. Plugin.game is set to the game reference the PluginManager uses, and parent is set to the PluginManager.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * plugin (object | Phaser.Plugin) - The Plugin to add into the PluginManager. This can be a function or an existing object.\n    * parameter (*) - Additional parameters that will be passed to the Plugin.init method.\n\n  Returns:  Phaser.Plugin - The Plugin that was added to the manager."}, :name phzr.game-object-factory/plugin, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 13, :method-params ([game-object-factory plugin parameter]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 544, :end-line 544, :max-fixed-arity 3, :fn-var true, :arglists (quote ([game-object-factory plugin parameter])), :doc "Add a new Plugin into the PluginManager.\n\n  The Plugin must have 2 properties: `game` and `parent`. Plugin.game is set to the game reference the PluginManager uses, and parent is set to the PluginManager.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * plugin (object | Phaser.Plugin) - The Plugin to add into the PluginManager. This can be a function or an existing object.\n    * parameter (*) - Additional parameters that will be passed to the Plugin.init method.\n\n  Returns:  Phaser.Plugin - The Plugin that was added to the manager."}, text {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 839, :column 7, :end-line 839, :end-column 11, :arglists (quote ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y text] [game-object-factory x y text style] [game-object-factory x y text style group])), :doc "Creates a new Text object.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) {optional} - The x coordinate of the Text. The coordinate is relative to any parent container this text may be in.\n    * y (number) {optional} - The y coordinate of the Text. The coordinate is relative to any parent container this text may be in.\n    * text (string) {optional} - The text string that will be displayed.\n    * style (object) {optional} - The style object containing style attributes like font, font size , etc.\n    * group (Phaser.Group) {optional} - Optional Group to add the object to. If not specified it will be added to the World group.\n\n  Returns:  Phaser.Text - The newly created text object.", :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y text] [game-object-factory x y text style] [game-object-factory x y text style group]), :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y text] [game-object-factory x y text style] [game-object-factory x y text style group]), :arglists-meta (nil nil nil nil nil nil)}}, :name phzr.game-object-factory/text, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y text] [game-object-factory x y text style] [game-object-factory x y text style group]), :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y text] [game-object-factory x y text style] [game-object-factory x y text style group]), :arglists-meta (nil nil nil nil nil nil)}, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y text] [game-object-factory x y text style] [game-object-factory x y text style group]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil), :column 1, :line 839, :end-line 839, :max-fixed-arity 6, :fn-var true, :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y text] [game-object-factory x y text style] [game-object-factory x y text style group]), :doc "Creates a new Text object.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) {optional} - The x coordinate of the Text. The coordinate is relative to any parent container this text may be in.\n    * y (number) {optional} - The y coordinate of the Text. The coordinate is relative to any parent container this text may be in.\n    * text (string) {optional} - The text string that will be displayed.\n    * style (object) {optional} - The style object containing style attributes like font, font size , etc.\n    * group (Phaser.Group) {optional} - Optional Group to add the object to. If not specified it will be added to the World group.\n\n  Returns:  Phaser.Text - The newly created text object."}, sprite-batch {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 811, :column 7, :end-line 811, :end-column 19, :arglists (quote ([game-object-factory parent] [game-object-factory parent name] [game-object-factory parent name add-to-stage])), :doc "A SpriteBatch is a really fast version of a Phaser Group built solely for speed.\n  Use when you need a lot of sprites or particles all sharing the same texture.\n  The speed gains are specifically for WebGL. In Canvas mode you won't see any real difference.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * parent (Phaser.Group | null) - The parent Group that will hold this Sprite Batch. Set to `undefined` or `null` to add directly to game.world.\n    * name (string) {optional} - A name for this Sprite Batch. Not used internally but useful for debugging.\n    * add-to-stage (boolean) {optional} - If set to true this Sprite Batch will be added directly to the Game.Stage instead of the parent.\n\n  Returns:  Phaser.SpriteBatch - The newly created Sprite Batch.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([game-object-factory parent] [game-object-factory parent name] [game-object-factory parent name add-to-stage]), :arglists ([game-object-factory parent] [game-object-factory parent name] [game-object-factory parent name add-to-stage]), :arglists-meta (nil nil nil)}}, :name phzr.game-object-factory/sprite-batch, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([game-object-factory parent] [game-object-factory parent name] [game-object-factory parent name add-to-stage]), :arglists ([game-object-factory parent] [game-object-factory parent name] [game-object-factory parent name add-to-stage]), :arglists-meta (nil nil nil)}, :method-params ([game-object-factory parent] [game-object-factory parent name] [game-object-factory parent name add-to-stage]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 811, :end-line 811, :max-fixed-arity 4, :fn-var true, :arglists ([game-object-factory parent] [game-object-factory parent name] [game-object-factory parent name add-to-stage]), :doc "A SpriteBatch is a really fast version of a Phaser Group built solely for speed.\n  Use when you need a lot of sprites or particles all sharing the same texture.\n  The speed gains are specifically for WebGL. In Canvas mode you won't see any real difference.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * parent (Phaser.Group | null) - The parent Group that will hold this Sprite Batch. Set to `undefined` or `null` to add directly to game.world.\n    * name (string) {optional} - A name for this Sprite Batch. Not used internally but useful for debugging.\n    * add-to-stage (boolean) {optional} - If set to true this Sprite Batch will be added directly to the Game.Stage instead of the parent.\n\n  Returns:  Phaser.SpriteBatch - The newly created Sprite Batch."}, audio-sprite {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 52, :column 7, :end-line 52, :end-column 19, :arglists (quote ([game-object-factory key])), :doc "Creates a new AudioSprite object.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * key (string) - The Game.cache key of the sound that this object will use.\n\n  Returns:  Phaser.AudioSprite - The newly created AudioSprite object."}, :name phzr.game-object-factory/audio-sprite, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 19, :method-params ([game-object-factory key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game-object-factory key])), :doc "Creates a new AudioSprite object.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * key (string) - The Game.cache key of the sound that this object will use.\n\n  Returns:  Phaser.AudioSprite - The newly created AudioSprite object."}, sound {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 727, :column 7, :end-line 727, :end-column 12, :arglists (quote ([game-object-factory key] [game-object-factory key volume] [game-object-factory key volume loop] [game-object-factory key volume loop connect])), :doc "Creates a new Sound object.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * key (string) - The Game.cache key of the sound that this object will use.\n    * volume (number) {optional} - The volume at which the sound will be played.\n    * loop (boolean) {optional} - Whether or not the sound will loop.\n    * connect (boolean) {optional} - Controls if the created Sound object will connect to the master gainNode of the SoundManager when running under WebAudio.\n\n  Returns:  Phaser.Sound - The newly created sound object.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([game-object-factory key] [game-object-factory key volume] [game-object-factory key volume loop] [game-object-factory key volume loop connect]), :arglists ([game-object-factory key] [game-object-factory key volume] [game-object-factory key volume loop] [game-object-factory key volume loop connect]), :arglists-meta (nil nil nil nil)}}, :name phzr.game-object-factory/sound, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([game-object-factory key] [game-object-factory key volume] [game-object-factory key volume loop] [game-object-factory key volume loop connect]), :arglists ([game-object-factory key] [game-object-factory key volume] [game-object-factory key volume loop] [game-object-factory key volume loop connect]), :arglists-meta (nil nil nil nil)}, :method-params ([game-object-factory key] [game-object-factory key volume] [game-object-factory key volume loop] [game-object-factory key volume loop connect]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 727, :end-line 727, :max-fixed-arity 5, :fn-var true, :arglists ([game-object-factory key] [game-object-factory key volume] [game-object-factory key volume loop] [game-object-factory key volume loop connect]), :doc "Creates a new Sound object.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * key (string) - The Game.cache key of the sound that this object will use.\n    * volume (number) {optional} - The volume at which the sound will be played.\n    * loop (boolean) {optional} - Whether or not the sound will loop.\n    * connect (boolean) {optional} - Controls if the created Sound object will connect to the master gainNode of the SoundManager when running under WebAudio.\n\n  Returns:  Phaser.Sound - The newly created sound object."}, video {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 994, :column 7, :end-line 994, :end-column 12, :arglists (quote ([game-object-factory] [game-object-factory key] [game-object-factory key url])), :doc "Create a Video object.\n\n  This will return a Phaser.Video object which you can pass to a Sprite to be used as a texture.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * key (string | null) {optional} - The key of the video file in the Phaser.Cache that this Video object will play. Set to `null` or leave undefined if you wish to use a webcam as the source. See `startMediaStream` to start webcam capture.\n    * url (string | null) {optional} - If the video hasn't been loaded then you can provide a full URL to the file here (make sure to set key to null)\n\n  Returns:  Phaser.Video - The newly created Video object.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([game-object-factory] [game-object-factory key] [game-object-factory key url]), :arglists ([game-object-factory] [game-object-factory key] [game-object-factory key url]), :arglists-meta (nil nil nil)}}, :name phzr.game-object-factory/video, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([game-object-factory] [game-object-factory key] [game-object-factory key url]), :arglists ([game-object-factory] [game-object-factory key] [game-object-factory key url]), :arglists-meta (nil nil nil)}, :method-params ([game-object-factory] [game-object-factory key] [game-object-factory key url]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 994, :end-line 994, :max-fixed-arity 3, :fn-var true, :arglists ([game-object-factory] [game-object-factory key] [game-object-factory key url]), :doc "Create a Video object.\n\n  This will return a Phaser.Video object which you can pass to a Sprite to be used as a texture.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * key (string | null) {optional} - The key of the video file in the Phaser.Cache that this Video object will play. Set to `null` or leave undefined if you wish to use a webcam as the source. See `startMediaStream` to start webcam capture.\n    * url (string | null) {optional} - If the video hasn't been loaded then you can provide a full URL to the file here (make sure to set key to null)\n\n  Returns:  Phaser.Video - The newly created Video object."}, existing {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 351, :column 7, :end-line 351, :end-column 15, :arglists (quote ([game-object-factory object])), :doc "Adds an existing display object to the game world.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * object (any) - An instance of Phaser.Sprite, Phaser.Button or any other display object.\n\n  Returns:  any - The child that was added to the World."}, :name phzr.game-object-factory/existing, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 15, :method-params ([game-object-factory object]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 351, :end-line 351, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game-object-factory object])), :doc "Adds an existing display object to the game world.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * object (any) - An instance of Phaser.Sprite, Phaser.Button or any other display object.\n\n  Returns:  any - The child that was added to the World."}, group {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 407, :column 7, :end-line 407, :end-column 12, :arglists (quote ([game-object-factory] [game-object-factory parent] [game-object-factory parent name] [game-object-factory parent name add-to-stage] [game-object-factory parent name add-to-stage enable-body] [game-object-factory parent name add-to-stage enable-body physics-body-type])), :doc "A Group is a container for display objects that allows for fast pooling, recycling and collision checks.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * parent (any) {optional} - The parent Group or DisplayObjectContainer that will hold this group, if any. If set to null the Group won't be added to the display list. If undefined it will be added to World by default.\n    * name (string) {optional} - A name for this Group. Not used internally but useful for debugging.\n    * add-to-stage (boolean) {optional} - If set to true this Group will be added directly to the Game.Stage instead of Game.World.\n    * enable-body (boolean) {optional} - If true all Sprites created with `Group.create` or `Group.createMulitple` will have a physics body created on them. Change the body type with physicsBodyType.\n    * physics-body-type (number) {optional} - If enableBody is true this is the type of physics body that is created on new Sprites. Phaser.Physics.ARCADE, Phaser.Physics.P2, Phaser.Physics.NINJA, etc.\n\n  Returns:  Phaser.Group - The newly created Group.", :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([game-object-factory] [game-object-factory parent] [game-object-factory parent name] [game-object-factory parent name add-to-stage] [game-object-factory parent name add-to-stage enable-body] [game-object-factory parent name add-to-stage enable-body physics-body-type]), :arglists ([game-object-factory] [game-object-factory parent] [game-object-factory parent name] [game-object-factory parent name add-to-stage] [game-object-factory parent name add-to-stage enable-body] [game-object-factory parent name add-to-stage enable-body physics-body-type]), :arglists-meta (nil nil nil nil nil nil)}}, :name phzr.game-object-factory/group, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([game-object-factory] [game-object-factory parent] [game-object-factory parent name] [game-object-factory parent name add-to-stage] [game-object-factory parent name add-to-stage enable-body] [game-object-factory parent name add-to-stage enable-body physics-body-type]), :arglists ([game-object-factory] [game-object-factory parent] [game-object-factory parent name] [game-object-factory parent name add-to-stage] [game-object-factory parent name add-to-stage enable-body] [game-object-factory parent name add-to-stage enable-body physics-body-type]), :arglists-meta (nil nil nil nil nil nil)}, :method-params ([game-object-factory] [game-object-factory parent] [game-object-factory parent name] [game-object-factory parent name add-to-stage] [game-object-factory parent name add-to-stage enable-body] [game-object-factory parent name add-to-stage enable-body physics-body-type]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil), :column 1, :line 407, :end-line 407, :max-fixed-arity 6, :fn-var true, :arglists ([game-object-factory] [game-object-factory parent] [game-object-factory parent name] [game-object-factory parent name add-to-stage] [game-object-factory parent name add-to-stage enable-body] [game-object-factory parent name add-to-stage enable-body physics-body-type]), :doc "A Group is a container for display objects that allows for fast pooling, recycling and collision checks.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * parent (any) {optional} - The parent Group or DisplayObjectContainer that will hold this group, if any. If set to null the Group won't be added to the display list. If undefined it will be added to World by default.\n    * name (string) {optional} - A name for this Group. Not used internally but useful for debugging.\n    * add-to-stage (boolean) {optional} - If set to true this Group will be added directly to the Game.Stage instead of Game.World.\n    * enable-body (boolean) {optional} - If true all Sprites created with `Group.create` or `Group.createMulitple` will have a physics body created on them. Change the body type with physicsBodyType.\n    * physics-body-type (number) {optional} - If enableBody is true this is the type of physics body that is created on new Sprites. Phaser.Physics.ARCADE, Phaser.Physics.P2, Phaser.Physics.NINJA, etc.\n\n  Returns:  Phaser.Group - The newly created Group."}, retro-font {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 598, :column 7, :end-line 598, :end-column 17, :arglists (quote ([game-object-factory font character-width character-height chars chars-per-row] [game-object-factory font character-width character-height chars chars-per-row x-spacing] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing x-offset] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing x-offset y-offset])), :doc "Create a new RetroFont object.\n\n  A RetroFont can be used as a texture for an Image or Sprite and optionally add it to the Cache.\n  A RetroFont uses a bitmap which contains fixed with characters for the font set. You use character spacing to define the set.\n  If you need variable width character support then use a BitmapText object instead. The main difference between a RetroFont and a BitmapText\n  is that a RetroFont creates a single texture that you can apply to a game object, where-as a BitmapText creates one Sprite object per letter of text.\n  The texture can be asssigned or one or multiple images/sprites, but note that the text the RetroFont uses will be shared across them all,\n  i.e. if you need each Image to have different text in it, then you need to create multiple RetroFont objects.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * font (string) - The key of the image in the Game.Cache that the RetroFont will use.\n    * character-width (number) - The width of each character in the font set.\n    * character-height (number) - The height of each character in the font set.\n    * chars (string) - The characters used in the font set, in display order. You can use the TEXT_SET consts for common font set arrangements.\n    * chars-per-row (number) - The number of characters per row in the font set.\n    * x-spacing (number) {optional} - If the characters in the font set have horizontal spacing between them set the required amount here.\n    * y-spacing (number) {optional} - If the characters in the font set have vertical spacing between them set the required amount here.\n    * x-offset (number) {optional} - If the font set doesn't start at the top left of the given image, specify the X coordinate offset here.\n    * y-offset (number) {optional} - If the font set doesn't start at the top left of the given image, specify the Y coordinate offset here.\n\n  Returns:  Phaser.RetroFont - The newly created RetroFont texture which can be applied to an Image or Sprite.", :top-fn {:variadic false, :max-fixed-arity 10, :method-params ([game-object-factory font character-width character-height chars chars-per-row] [game-object-factory font character-width character-height chars chars-per-row x-spacing] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing x-offset] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing x-offset y-offset]), :arglists ([game-object-factory font character-width character-height chars chars-per-row] [game-object-factory font character-width character-height chars chars-per-row x-spacing] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing x-offset] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing x-offset y-offset]), :arglists-meta (nil nil nil nil nil)}}, :name phzr.game-object-factory/retro-font, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 10, :method-params ([game-object-factory font character-width character-height chars chars-per-row] [game-object-factory font character-width character-height chars chars-per-row x-spacing] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing x-offset] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing x-offset y-offset]), :arglists ([game-object-factory font character-width character-height chars chars-per-row] [game-object-factory font character-width character-height chars chars-per-row x-spacing] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing x-offset] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing x-offset y-offset]), :arglists-meta (nil nil nil nil nil)}, :method-params ([game-object-factory font character-width character-height chars chars-per-row] [game-object-factory font character-width character-height chars chars-per-row x-spacing] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing x-offset] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing x-offset y-offset]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column 1, :line 598, :end-line 598, :max-fixed-arity 10, :fn-var true, :arglists ([game-object-factory font character-width character-height chars chars-per-row] [game-object-factory font character-width character-height chars chars-per-row x-spacing] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing x-offset] [game-object-factory font character-width character-height chars chars-per-row x-spacing y-spacing x-offset y-offset]), :doc "Create a new RetroFont object.\n\n  A RetroFont can be used as a texture for an Image or Sprite and optionally add it to the Cache.\n  A RetroFont uses a bitmap which contains fixed with characters for the font set. You use character spacing to define the set.\n  If you need variable width character support then use a BitmapText object instead. The main difference between a RetroFont and a BitmapText\n  is that a RetroFont creates a single texture that you can apply to a game object, where-as a BitmapText creates one Sprite object per letter of text.\n  The texture can be asssigned or one or multiple images/sprites, but note that the text the RetroFont uses will be shared across them all,\n  i.e. if you need each Image to have different text in it, then you need to create multiple RetroFont objects.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * font (string) - The key of the image in the Game.Cache that the RetroFont will use.\n    * character-width (number) - The width of each character in the font set.\n    * character-height (number) - The height of each character in the font set.\n    * chars (string) - The characters used in the font set, in display order. You can use the TEXT_SET consts for common font set arrangements.\n    * chars-per-row (number) - The number of characters per row in the font set.\n    * x-spacing (number) {optional} - If the characters in the font set have horizontal spacing between them set the required amount here.\n    * y-spacing (number) {optional} - If the characters in the font set have vertical spacing between them set the required amount here.\n    * x-offset (number) {optional} - If the font set doesn't start at the top left of the given image, specify the X coordinate offset here.\n    * y-offset (number) {optional} - If the font set doesn't start at the top left of the given image, specify the Y coordinate offset here.\n\n  Returns:  Phaser.RetroFont - The newly created RetroFont texture which can be applied to an Image or Sprite."}, rope {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 672, :column 7, :end-line 672, :end-column 11, :arglists (quote ([game-object-factory points] [game-object-factory points x] [game-object-factory points x y] [game-object-factory points x y key] [game-object-factory points x y key frame] [game-object-factory points x y key frame group])), :doc "Creates a new Rope object.\n\n  Example usage: https://github.com/codevinsky/phaser-rope-demo/blob/master/dist/demo.js\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) {optional} - The x coordinate of the Rope. The coordinate is relative to any parent container this rope may be in.\n    * y (number) {optional} - The y coordinate of the Rope. The coordinate is relative to any parent container this rope may be in.\n    * key (string | Phaser.RenderTexture | Phaser.BitmapData | Phaser.Video | PIXI.Texture) {optional} - The image used as a texture by this display object during rendering. If a string Phaser will get for an entry in the Image Cache. Or it can be an instance of a RenderTexture, BitmapData, Video or PIXI.Texture.\n    * frame (string | number) {optional} - If a Texture Atlas or Sprite Sheet is used this allows you to specify the frame to be used. Use either an integer for a Frame ID or a string for a frame name.\n    * points (Array) - An array of {Phaser.Point}.\n    * group (Phaser.Group) {optional} - Optional Group to add the object to. If not specified it will be added to the World group.\n\n  Returns:  Phaser.Rope - The newly created Rope object.", :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([game-object-factory points] [game-object-factory points x] [game-object-factory points x y] [game-object-factory points x y key] [game-object-factory points x y key frame] [game-object-factory points x y key frame group]), :arglists ([game-object-factory points] [game-object-factory points x] [game-object-factory points x y] [game-object-factory points x y key] [game-object-factory points x y key frame] [game-object-factory points x y key frame group]), :arglists-meta (nil nil nil nil nil nil)}}, :name phzr.game-object-factory/rope, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([game-object-factory points] [game-object-factory points x] [game-object-factory points x y] [game-object-factory points x y key] [game-object-factory points x y key frame] [game-object-factory points x y key frame group]), :arglists ([game-object-factory points] [game-object-factory points x] [game-object-factory points x y] [game-object-factory points x y key] [game-object-factory points x y key frame] [game-object-factory points x y key frame group]), :arglists-meta (nil nil nil nil nil nil)}, :method-params ([game-object-factory points] [game-object-factory points x] [game-object-factory points x y] [game-object-factory points x y key] [game-object-factory points x y key frame] [game-object-factory points x y key frame group]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil), :column 1, :line 672, :end-line 672, :max-fixed-arity 7, :fn-var true, :arglists ([game-object-factory points] [game-object-factory points x] [game-object-factory points x y] [game-object-factory points x y key] [game-object-factory points x y key frame] [game-object-factory points x y key frame group]), :doc "Creates a new Rope object.\n\n  Example usage: https://github.com/codevinsky/phaser-rope-demo/blob/master/dist/demo.js\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) {optional} - The x coordinate of the Rope. The coordinate is relative to any parent container this rope may be in.\n    * y (number) {optional} - The y coordinate of the Rope. The coordinate is relative to any parent container this rope may be in.\n    * key (string | Phaser.RenderTexture | Phaser.BitmapData | Phaser.Video | PIXI.Texture) {optional} - The image used as a texture by this display object during rendering. If a string Phaser will get for an entry in the Image Cache. Or it can be an instance of a RenderTexture, BitmapData, Video or PIXI.Texture.\n    * frame (string | number) {optional} - If a Texture Atlas or Sprite Sheet is used this allows you to specify the frame to be used. Use either an integer for a Frame ID or a string for a frame name.\n    * points (Array) - An array of {Phaser.Point}.\n    * group (Phaser.Group) {optional} - Optional Group to add the object to. If not specified it will be added to the World group.\n\n  Returns:  Phaser.Rope - The newly created Rope object."}, button {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 164, :column 7, :end-line 164, :end-column 13, :arglists (quote ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key callback] [game-object-factory x y key callback callback-context] [game-object-factory x y key callback callback-context over-frame] [game-object-factory x y key callback callback-context over-frame out-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame up-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame up-frame group])), :doc "Creates a new Button object.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) {optional} - The x coordinate of the Button. The coordinate is relative to any parent container this button may be in.\n    * y (number) {optional} - The y coordinate of the Button. The coordinate is relative to any parent container this button may be in.\n    * key (string) {optional} - The image key as defined in the Game.Cache to use as the texture for this button.\n    * callback (function) {optional} - The function to call when this button is pressed\n    * callback-context (object) {optional} - The context in which the callback will be called (usually 'this')\n    * over-frame (string | number) {optional} - This is the frame or frameName that will be set when this button is in an over state. Give either a number to use a frame ID or a string for a frame name.\n    * out-frame (string | number) {optional} - This is the frame or frameName that will be set when this button is in an out state. Give either a number to use a frame ID or a string for a frame name.\n    * down-frame (string | number) {optional} - This is the frame or frameName that will be set when this button is in a down state. Give either a number to use a frame ID or a string for a frame name.\n    * up-frame (string | number) {optional} - This is the frame or frameName that will be set when this button is in an up state. Give either a number to use a frame ID or a string for a frame name.\n    * group (Phaser.Group) {optional} - Optional Group to add the object to. If not specified it will be added to the World group.\n\n  Returns:  Phaser.Button - The newly created Button object.", :top-fn {:variadic false, :max-fixed-arity 11, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key callback] [game-object-factory x y key callback callback-context] [game-object-factory x y key callback callback-context over-frame] [game-object-factory x y key callback callback-context over-frame out-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame up-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame up-frame group]), :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key callback] [game-object-factory x y key callback callback-context] [game-object-factory x y key callback callback-context over-frame] [game-object-factory x y key callback callback-context over-frame out-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame up-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame up-frame group]), :arglists-meta (nil nil nil nil nil nil nil nil nil nil nil)}}, :name phzr.game-object-factory/button, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 11, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key callback] [game-object-factory x y key callback callback-context] [game-object-factory x y key callback callback-context over-frame] [game-object-factory x y key callback callback-context over-frame out-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame up-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame up-frame group]), :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key callback] [game-object-factory x y key callback callback-context] [game-object-factory x y key callback callback-context over-frame] [game-object-factory x y key callback callback-context over-frame out-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame up-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame up-frame group]), :arglists-meta (nil nil nil nil nil nil nil nil nil nil nil)}, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key callback] [game-object-factory x y key callback callback-context] [game-object-factory x y key callback callback-context over-frame] [game-object-factory x y key callback callback-context over-frame out-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame up-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame up-frame group]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil nil nil nil nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 11, :fn-var true, :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key callback] [game-object-factory x y key callback callback-context] [game-object-factory x y key callback callback-context over-frame] [game-object-factory x y key callback callback-context over-frame out-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame up-frame] [game-object-factory x y key callback callback-context over-frame out-frame down-frame up-frame group]), :doc "Creates a new Button object.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) {optional} - The x coordinate of the Button. The coordinate is relative to any parent container this button may be in.\n    * y (number) {optional} - The y coordinate of the Button. The coordinate is relative to any parent container this button may be in.\n    * key (string) {optional} - The image key as defined in the Game.Cache to use as the texture for this button.\n    * callback (function) {optional} - The function to call when this button is pressed\n    * callback-context (object) {optional} - The context in which the callback will be called (usually 'this')\n    * over-frame (string | number) {optional} - This is the frame or frameName that will be set when this button is in an over state. Give either a number to use a frame ID or a string for a frame name.\n    * out-frame (string | number) {optional} - This is the frame or frameName that will be set when this button is in an out state. Give either a number to use a frame ID or a string for a frame name.\n    * down-frame (string | number) {optional} - This is the frame or frameName that will be set when this button is in a down state. Give either a number to use a frame ID or a string for a frame name.\n    * up-frame (string | number) {optional} - This is the frame or frameName that will be set when this button is in an up state. Give either a number to use a frame ID or a string for a frame name.\n    * group (Phaser.Group) {optional} - Optional Group to add the object to. If not specified it will be added to the World group.\n\n  Returns:  Phaser.Button - The newly created Button object."}, render-texture {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 561, :column 7, :end-line 561, :end-column 21, :arglists (quote ([game-object-factory] [game-object-factory width] [game-object-factory width height] [game-object-factory width height key] [game-object-factory width height key add-to-cache])), :doc "A dynamic initially blank canvas to which images can be drawn.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * width (number) {optional} - the width of the RenderTexture.\n    * height (number) {optional} - the height of the RenderTexture.\n    * key (string) {optional} - Asset key for the RenderTexture when stored in the Cache (see addToCache parameter).\n    * add-to-cache (boolean) {optional} - Should this RenderTexture be added to the Game.Cache? If so you can retrieve it with Cache.getTexture(key)\n\n  Returns:  Phaser.RenderTexture - The newly created RenderTexture object.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([game-object-factory] [game-object-factory width] [game-object-factory width height] [game-object-factory width height key] [game-object-factory width height key add-to-cache]), :arglists ([game-object-factory] [game-object-factory width] [game-object-factory width height] [game-object-factory width height key] [game-object-factory width height key add-to-cache]), :arglists-meta (nil nil nil nil nil)}}, :name phzr.game-object-factory/render-texture, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([game-object-factory] [game-object-factory width] [game-object-factory width height] [game-object-factory width height key] [game-object-factory width height key add-to-cache]), :arglists ([game-object-factory] [game-object-factory width] [game-object-factory width height] [game-object-factory width height key] [game-object-factory width height key add-to-cache]), :arglists-meta (nil nil nil nil nil)}, :method-params ([game-object-factory] [game-object-factory width] [game-object-factory width height] [game-object-factory width height key] [game-object-factory width height key add-to-cache]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column 1, :line 561, :end-line 561, :max-fixed-arity 5, :fn-var true, :arglists ([game-object-factory] [game-object-factory width] [game-object-factory width height] [game-object-factory width height key] [game-object-factory width height key add-to-cache]), :doc "A dynamic initially blank canvas to which images can be drawn.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * width (number) {optional} - the width of the RenderTexture.\n    * height (number) {optional} - the height of the RenderTexture.\n    * key (string) {optional} - Asset key for the RenderTexture when stored in the Cache (see addToCache parameter).\n    * add-to-cache (boolean) {optional} - Should this RenderTexture be added to the Game.Cache? If so you can retrieve it with Cache.getTexture(key)\n\n  Returns:  Phaser.RenderTexture - The newly created RenderTexture object."}, bitmap-data {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 65, :column 7, :end-line 65, :end-column 18, :arglists (quote ([game-object-factory] [game-object-factory width] [game-object-factory width height] [game-object-factory width height key] [game-object-factory width height key add-to-cache])), :doc "Create a BitmapData object.\n\n  A BitmapData object can be manipulated and drawn to like a traditional Canvas object and used to texture Sprites.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * width (number) {optional} - The width of the BitmapData in pixels.\n    * height (number) {optional} - The height of the BitmapData in pixels.\n    * key (string) {optional} - Asset key for the BitmapData when stored in the Cache (see addToCache parameter).\n    * add-to-cache (boolean) {optional} - Should this BitmapData be added to the Game.Cache? If so you can retrieve it with Cache.getBitmapData(key)\n\n  Returns:  Phaser.BitmapData - The newly created BitmapData object.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([game-object-factory] [game-object-factory width] [game-object-factory width height] [game-object-factory width height key] [game-object-factory width height key add-to-cache]), :arglists ([game-object-factory] [game-object-factory width] [game-object-factory width height] [game-object-factory width height key] [game-object-factory width height key add-to-cache]), :arglists-meta (nil nil nil nil nil)}}, :name phzr.game-object-factory/bitmap-data, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([game-object-factory] [game-object-factory width] [game-object-factory width height] [game-object-factory width height key] [game-object-factory width height key add-to-cache]), :arglists ([game-object-factory] [game-object-factory width] [game-object-factory width height] [game-object-factory width height key] [game-object-factory width height key add-to-cache]), :arglists-meta (nil nil nil nil nil)}, :method-params ([game-object-factory] [game-object-factory width] [game-object-factory width height] [game-object-factory width height key] [game-object-factory width height key add-to-cache]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 5, :fn-var true, :arglists ([game-object-factory] [game-object-factory width] [game-object-factory width height] [game-object-factory width height key] [game-object-factory width height key add-to-cache]), :doc "Create a BitmapData object.\n\n  A BitmapData object can be manipulated and drawn to like a traditional Canvas object and used to texture Sprites.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * width (number) {optional} - The width of the BitmapData in pixels.\n    * height (number) {optional} - The height of the BitmapData in pixels.\n    * key (string) {optional} - Asset key for the BitmapData when stored in the Cache (see addToCache parameter).\n    * add-to-cache (boolean) {optional} - Should this BitmapData be added to the Game.Cache? If so you can retrieve it with Cache.getBitmapData(key)\n\n  Returns:  Phaser.BitmapData - The newly created BitmapData object."}, physics-group {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 504, :column 7, :end-line 504, :end-column 20, :arglists (quote ([game-object-factory] [game-object-factory physics-body-type] [game-object-factory physics-body-type parent] [game-object-factory physics-body-type parent name] [game-object-factory physics-body-type parent name add-to-stage])), :doc "A Group is a container for display objects that allows for fast pooling, recycling and collision checks.\n\n  A Physics Group is the same as an ordinary Group except that is has enableBody turned on by default, so any Sprites it creates\n  are automatically given a physics body.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * physics-body-type (number) {optional} - If enableBody is true this is the type of physics body that is created on new Sprites. Phaser.Physics.ARCADE, Phaser.Physics.P2, Phaser.Physics.NINJA, etc.\n    * parent (any) {optional} - The parent Group or DisplayObjectContainer that will hold this group, if any. If set to null the Group won't be added to the display list. If undefined it will be added to World by default.\n    * name (string) {optional} - A name for this Group. Not used internally but useful for debugging.\n    * add-to-stage (boolean) {optional} - If set to true this Group will be added directly to the Game.Stage instead of Game.World.\n\n  Returns:  Phaser.Group - The newly created Group.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([game-object-factory] [game-object-factory physics-body-type] [game-object-factory physics-body-type parent] [game-object-factory physics-body-type parent name] [game-object-factory physics-body-type parent name add-to-stage]), :arglists ([game-object-factory] [game-object-factory physics-body-type] [game-object-factory physics-body-type parent] [game-object-factory physics-body-type parent name] [game-object-factory physics-body-type parent name add-to-stage]), :arglists-meta (nil nil nil nil nil)}}, :name phzr.game-object-factory/physics-group, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([game-object-factory] [game-object-factory physics-body-type] [game-object-factory physics-body-type parent] [game-object-factory physics-body-type parent name] [game-object-factory physics-body-type parent name add-to-stage]), :arglists ([game-object-factory] [game-object-factory physics-body-type] [game-object-factory physics-body-type parent] [game-object-factory physics-body-type parent name] [game-object-factory physics-body-type parent name add-to-stage]), :arglists-meta (nil nil nil nil nil)}, :method-params ([game-object-factory] [game-object-factory physics-body-type] [game-object-factory physics-body-type parent] [game-object-factory physics-body-type parent name] [game-object-factory physics-body-type parent name add-to-stage]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column 1, :line 504, :end-line 504, :max-fixed-arity 5, :fn-var true, :arglists ([game-object-factory] [game-object-factory physics-body-type] [game-object-factory physics-body-type parent] [game-object-factory physics-body-type parent name] [game-object-factory physics-body-type parent name add-to-stage]), :doc "A Group is a container for display objects that allows for fast pooling, recycling and collision checks.\n\n  A Physics Group is the same as an ordinary Group except that is has enableBody turned on by default, so any Sprites it creates\n  are automatically given a physics body.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * physics-body-type (number) {optional} - If enableBody is true this is the type of physics body that is created on new Sprites. Phaser.Physics.ARCADE, Phaser.Physics.P2, Phaser.Physics.NINJA, etc.\n    * parent (any) {optional} - The parent Group or DisplayObjectContainer that will hold this group, if any. If set to null the Group won't be added to the display list. If undefined it will be added to World by default.\n    * name (string) {optional} - A name for this Group. Not used internally but useful for debugging.\n    * add-to-stage (boolean) {optional} - If set to true this Group will be added directly to the Game.Stage instead of Game.World.\n\n  Returns:  Phaser.Group - The newly created Group."}, sprite {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 761, :column 7, :end-line 761, :end-column 13, :arglists (quote ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key frame] [game-object-factory x y key frame group])), :doc "Create a new Sprite with specific position and sprite sheet key.\n\n  At its most basic a Sprite consists of a set of coordinates and a texture that is used when rendered.\n  They also contain additional properties allowing for physics motion (via Sprite.body), input handling (via Sprite.input),\n  events (via Sprite.events), animation (via Sprite.animations), camera culling and more. Please see the Examples for use cases.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) {optional} - The x coordinate of the sprite. The coordinate is relative to any parent container this sprite may be in.\n    * y (number) {optional} - The y coordinate of the sprite. The coordinate is relative to any parent container this sprite may be in.\n    * key (string | Phaser.RenderTexture | Phaser.BitmapData | Phaser.Video | PIXI.Texture) {optional} - The image used as a texture by this display object during rendering. If a string Phaser will get for an entry in the Image Cache. Or it can be an instance of a RenderTexture, BitmapData, Video or PIXI.Texture.\n    * frame (string | number) {optional} - If a Texture Atlas or Sprite Sheet is used this allows you to specify the frame to be used. Use either an integer for a Frame ID or a string for a frame name.\n    * group (Phaser.Group) {optional} - Optional Group to add the object to. If not specified it will be added to the World group.\n\n  Returns:  Phaser.Sprite - The newly created Sprite object.", :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key frame] [game-object-factory x y key frame group]), :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key frame] [game-object-factory x y key frame group]), :arglists-meta (nil nil nil nil nil nil)}}, :name phzr.game-object-factory/sprite, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key frame] [game-object-factory x y key frame group]), :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key frame] [game-object-factory x y key frame group]), :arglists-meta (nil nil nil nil nil nil)}, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key frame] [game-object-factory x y key frame group]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil), :column 1, :line 761, :end-line 761, :max-fixed-arity 6, :fn-var true, :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key frame] [game-object-factory x y key frame group]), :doc "Create a new Sprite with specific position and sprite sheet key.\n\n  At its most basic a Sprite consists of a set of coordinates and a texture that is used when rendered.\n  They also contain additional properties allowing for physics motion (via Sprite.body), input handling (via Sprite.input),\n  events (via Sprite.events), animation (via Sprite.animations), camera culling and more. Please see the Examples for use cases.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) {optional} - The x coordinate of the sprite. The coordinate is relative to any parent container this sprite may be in.\n    * y (number) {optional} - The y coordinate of the sprite. The coordinate is relative to any parent container this sprite may be in.\n    * key (string | Phaser.RenderTexture | Phaser.BitmapData | Phaser.Video | PIXI.Texture) {optional} - The image used as a texture by this display object during rendering. If a string Phaser will get for an entry in the Image Cache. Or it can be an instance of a RenderTexture, BitmapData, Video or PIXI.Texture.\n    * frame (string | number) {optional} - If a Texture Atlas or Sprite Sheet is used this allows you to specify the frame to be used. Use either an integer for a Frame ID or a string for a frame name.\n    * group (Phaser.Group) {optional} - Optional Group to add the object to. If not specified it will be added to the World group.\n\n  Returns:  Phaser.Sprite - The newly created Sprite object."}, creature {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 270, :column 7, :end-line 270, :end-column 15, :arglists (quote ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key group])), :doc "Create a new Creature Animation object.\n\n  Creature is a custom Game Object used in conjunction with the Creature Runtime libraries by Kestrel Moon Studios.\n\n  It allows you to display animated Game Objects that were created with the [Creature Automated Animation Tool](http://www.kestrelmoon.com/creature/).\n\n  Note 1: You can only use Phaser.Creature objects in WebGL enabled games. They do not work in Canvas mode games.\n\n  Note 2: You must use a build of Phaser that includes the CreatureMeshBone.js runtime and gl-matrix.js, or have them\n  loaded before your Phaser game boots.\n\n  See the Phaser custom build process for more details.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) {optional} - The x coordinate of the creature. The coordinate is relative to any parent container this creature may be in.\n    * y (number) {optional} - The y coordinate of the creature. The coordinate is relative to any parent container this creature may be in.\n    * key (string | PIXI.Texture) {optional} - The image used as a texture by this creature object during rendering. If a string Phaser will get for an entry in the Image Cache. Or it can be an instance of a PIXI.Texture.\n    * group (Phaser.Group) {optional} - Optional Group to add the object to. If not specified it will be added to the World group.\n\n  Returns:  Phaser.Creature - The newly created Sprite object.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key group]), :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key group]), :arglists-meta (nil nil nil nil nil)}}, :name phzr.game-object-factory/creature, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key group]), :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key group]), :arglists-meta (nil nil nil nil nil)}, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key group]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 5, :fn-var true, :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key group]), :doc "Create a new Creature Animation object.\n\n  Creature is a custom Game Object used in conjunction with the Creature Runtime libraries by Kestrel Moon Studios.\n\n  It allows you to display animated Game Objects that were created with the [Creature Automated Animation Tool](http://www.kestrelmoon.com/creature/).\n\n  Note 1: You can only use Phaser.Creature objects in WebGL enabled games. They do not work in Canvas mode games.\n\n  Note 2: You must use a build of Phaser that includes the CreatureMeshBone.js runtime and gl-matrix.js, or have them\n  loaded before your Phaser game boots.\n\n  See the Phaser custom build process for more details.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) {optional} - The x coordinate of the creature. The coordinate is relative to any parent container this creature may be in.\n    * y (number) {optional} - The y coordinate of the creature. The coordinate is relative to any parent container this creature may be in.\n    * key (string | PIXI.Texture) {optional} - The image used as a texture by this creature object during rendering. If a string Phaser will get for an entry in the Image Cache. Or it can be an instance of a PIXI.Texture.\n    * group (Phaser.Group) {optional} - Optional Group to add the object to. If not specified it will be added to the World group.\n\n  Returns:  Phaser.Creature - The newly created Sprite object."}, filter {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 364, :column 7, :end-line 364, :end-column 13, :arglists (quote ([game-object-factory filter & args])), :doc "A WebGL shader/filter that can be applied to Sprites.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * filter (string) - The name of the filter you wish to create, for example HueRotate or SineWave.\n    * args (any) - Whatever parameters are needed to be passed to the filter init function.\n\n  Returns:  Phaser.Filter - The newly created Phaser.Filter object.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(game-object-factory filter args)], :arglists ([game-object-factory filter & args]), :arglists-meta (nil)}}, :name phzr.game-object-factory/filter, :variadic true, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(game-object-factory filter args)], :arglists ([game-object-factory filter & args]), :arglists-meta (nil)}, :method-params [(game-object-factory filter args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 364, :end-line 364, :max-fixed-arity 2, :fn-var true, :arglists ([game-object-factory filter & args]), :doc "A WebGL shader/filter that can be applied to Sprites.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * filter (string) - The name of the filter you wish to create, for example HueRotate or SineWave.\n    * args (any) - Whatever parameters are needed to be passed to the filter init function.\n\n  Returns:  Phaser.Filter - The newly created Phaser.Filter object."}, tilemap {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 927, :column 7, :end-line 927, :end-column 14, :arglists (quote ([game-object-factory] [game-object-factory key] [game-object-factory key tile-width] [game-object-factory key tile-width tile-height] [game-object-factory key tile-width tile-height width] [game-object-factory key tile-width tile-height width height])), :doc "Creates a new Phaser.Tilemap object.\n\n  The map can either be populated with data from a Tiled JSON file or from a CSV file.\n  To do this pass the Cache key as the first parameter. When using Tiled data you need only provide the key.\n  When using CSV data you must provide the key and the tileWidth and tileHeight parameters.\n  If creating a blank tilemap to be populated later, you can either specify no parameters at all and then use `Tilemap.create` or pass the map and tile dimensions here.\n  Note that all Tilemaps use a base tile size to calculate dimensions from, but that a TilemapLayer may have its own unique tile size that overrides it.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * key (string) {optional} - The key of the tilemap data as stored in the Cache. If you're creating a blank map either leave this parameter out or pass `null`.\n    * tile-width (number) {optional} - The pixel width of a single map tile. If using CSV data you must specify this. Not required if using Tiled map data.\n    * tile-height (number) {optional} - The pixel height of a single map tile. If using CSV data you must specify this. Not required if using Tiled map data.\n    * width (number) {optional} - The width of the map in tiles. If this map is created from Tiled or CSV data you don't need to specify this.\n    * height (number) {optional} - The height of the map in tiles. If this map is created from Tiled or CSV data you don't need to specify this.\n\n  Returns:  Phaser.Tilemap - The newly created tilemap object.", :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([game-object-factory] [game-object-factory key] [game-object-factory key tile-width] [game-object-factory key tile-width tile-height] [game-object-factory key tile-width tile-height width] [game-object-factory key tile-width tile-height width height]), :arglists ([game-object-factory] [game-object-factory key] [game-object-factory key tile-width] [game-object-factory key tile-width tile-height] [game-object-factory key tile-width tile-height width] [game-object-factory key tile-width tile-height width height]), :arglists-meta (nil nil nil nil nil nil)}}, :name phzr.game-object-factory/tilemap, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([game-object-factory] [game-object-factory key] [game-object-factory key tile-width] [game-object-factory key tile-width tile-height] [game-object-factory key tile-width tile-height width] [game-object-factory key tile-width tile-height width height]), :arglists ([game-object-factory] [game-object-factory key] [game-object-factory key tile-width] [game-object-factory key tile-width tile-height] [game-object-factory key tile-width tile-height width] [game-object-factory key tile-width tile-height width height]), :arglists-meta (nil nil nil nil nil nil)}, :method-params ([game-object-factory] [game-object-factory key] [game-object-factory key tile-width] [game-object-factory key tile-width tile-height] [game-object-factory key tile-width tile-height width] [game-object-factory key tile-width tile-height width height]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil), :column 1, :line 927, :end-line 927, :max-fixed-arity 6, :fn-var true, :arglists ([game-object-factory] [game-object-factory key] [game-object-factory key tile-width] [game-object-factory key tile-width tile-height] [game-object-factory key tile-width tile-height width] [game-object-factory key tile-width tile-height width height]), :doc "Creates a new Phaser.Tilemap object.\n\n  The map can either be populated with data from a Tiled JSON file or from a CSV file.\n  To do this pass the Cache key as the first parameter. When using Tiled data you need only provide the key.\n  When using CSV data you must provide the key and the tileWidth and tileHeight parameters.\n  If creating a blank tilemap to be populated later, you can either specify no parameters at all and then use `Tilemap.create` or pass the map and tile dimensions here.\n  Note that all Tilemaps use a base tile size to calculate dimensions from, but that a TilemapLayer may have its own unique tile size that overrides it.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * key (string) {optional} - The key of the tilemap data as stored in the Cache. If you're creating a blank map either leave this parameter out or pass `null`.\n    * tile-width (number) {optional} - The pixel width of a single map tile. If using CSV data you must specify this. Not required if using Tiled map data.\n    * tile-height (number) {optional} - The pixel height of a single map tile. If using CSV data you must specify this. Not required if using Tiled map data.\n    * width (number) {optional} - The width of the map in tiles. If this map is created from Tiled or CSV data you don't need to specify this.\n    * height (number) {optional} - The height of the map in tiles. If this map is created from Tiled or CSV data you don't need to specify this.\n\n  Returns:  Phaser.Tilemap - The newly created tilemap object."}, bitmap-text {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 104, :column 7, :end-line 104, :end-column 18, :arglists (quote ([game-object-factory x y font] [game-object-factory x y font text] [game-object-factory x y font text size] [game-object-factory x y font text size group])), :doc "Create a new BitmapText object.\n\n  BitmapText objects work by taking a texture file and an XML file that describes the font structure.\n  It then generates a new Sprite object for each letter of the text, proportionally spaced out and aligned to \n  match the font structure.\n\n  BitmapText objects are less flexible than Text objects, in that they have less features such as shadows, fills and the ability \n  to use Web Fonts. However you trade this flexibility for pure rendering speed. You can also create visually compelling BitmapTexts by \n  processing the font texture in an image editor first, applying fills and any other effects required.\n\n  To create multi-line text insert \\r, \\n or \\r\\n escape codes into the text string.\n\n  To create a BitmapText data files you can use:\n\n  BMFont (Windows, free): http://www.angelcode.com/products/bmfont/\n  Glyph Designer (OS X, commercial): http://www.71squared.com/en/glyphdesigner\n  Littera (Web-based, free): http://kvazars.com/littera/\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) - X coordinate to display the BitmapText object at.\n    * y (number) - Y coordinate to display the BitmapText object at.\n    * font (string) - The key of the BitmapText as stored in Phaser.Cache.\n    * text (string) {optional} - The text that will be rendered. This can also be set later via BitmapText.text.\n    * size (number) {optional} - The size the font will be rendered at in pixels.\n    * group (Phaser.Group) {optional} - Optional Group to add the object to. If not specified it will be added to the World group.\n\n  Returns:  Phaser.BitmapText - The newly created bitmapText object.", :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([game-object-factory x y font] [game-object-factory x y font text] [game-object-factory x y font text size] [game-object-factory x y font text size group]), :arglists ([game-object-factory x y font] [game-object-factory x y font text] [game-object-factory x y font text size] [game-object-factory x y font text size group]), :arglists-meta (nil nil nil nil)}}, :name phzr.game-object-factory/bitmap-text, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 7, :method-params ([game-object-factory x y font] [game-object-factory x y font text] [game-object-factory x y font text size] [game-object-factory x y font text size group]), :arglists ([game-object-factory x y font] [game-object-factory x y font text] [game-object-factory x y font text size] [game-object-factory x y font text size group]), :arglists-meta (nil nil nil nil)}, :method-params ([game-object-factory x y font] [game-object-factory x y font text] [game-object-factory x y font text size] [game-object-factory x y font text size group]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 7, :fn-var true, :arglists ([game-object-factory x y font] [game-object-factory x y font text] [game-object-factory x y font text size] [game-object-factory x y font text size group]), :doc "Create a new BitmapText object.\n\n  BitmapText objects work by taking a texture file and an XML file that describes the font structure.\n  It then generates a new Sprite object for each letter of the text, proportionally spaced out and aligned to \n  match the font structure.\n\n  BitmapText objects are less flexible than Text objects, in that they have less features such as shadows, fills and the ability \n  to use Web Fonts. However you trade this flexibility for pure rendering speed. You can also create visually compelling BitmapTexts by \n  processing the font texture in an image editor first, applying fills and any other effects required.\n\n  To create multi-line text insert \\r, \\n or \\r\\n escape codes into the text string.\n\n  To create a BitmapText data files you can use:\n\n  BMFont (Windows, free): http://www.angelcode.com/products/bmfont/\n  Glyph Designer (OS X, commercial): http://www.71squared.com/en/glyphdesigner\n  Littera (Web-based, free): http://kvazars.com/littera/\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) - X coordinate to display the BitmapText object at.\n    * y (number) - Y coordinate to display the BitmapText object at.\n    * font (string) - The key of the BitmapText as stored in Phaser.Cache.\n    * text (string) {optional} - The text that will be rendered. This can also be set later via BitmapText.text.\n    * size (number) {optional} - The size the font will be rendered at in pixels.\n    * group (Phaser.Group) {optional} - Optional Group to add the object to. If not specified it will be added to the World group.\n\n  Returns:  Phaser.BitmapText - The newly created bitmapText object."}, tile-sprite {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 885, :column 7, :end-line 885, :end-column 18, :arglists (quote ([game-object-factory x y width height key] [game-object-factory x y width height key frame] [game-object-factory x y width height key frame group])), :doc "Creates a new TileSprite object.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) - The x coordinate of the TileSprite. The coordinate is relative to any parent container this TileSprite may be in.\n    * y (number) - The y coordinate of the TileSprite. The coordinate is relative to any parent container this TileSprite may be in.\n    * width (number) - The width of the TileSprite.\n    * height (number) - The height of the TileSprite.\n    * key (string | Phaser.RenderTexture | Phaser.BitmapData | Phaser.Video | PIXI.Texture) - The image used as a texture by this display object during rendering. If a string Phaser will get for an entry in the Image Cache. Or it can be an instance of a RenderTexture, BitmapData, Video or PIXI.Texture.\n    * frame (string | number) {optional} - If a Texture Atlas or Sprite Sheet is used this allows you to specify the frame to be used. Use either an integer for a Frame ID or a string for a frame name.\n    * group (Phaser.Group) {optional} - Optional Group to add the object to. If not specified it will be added to the World group.\n\n  Returns:  Phaser.TileSprite - The newly created TileSprite object.", :top-fn {:variadic false, :max-fixed-arity 8, :method-params ([game-object-factory x y width height key] [game-object-factory x y width height key frame] [game-object-factory x y width height key frame group]), :arglists ([game-object-factory x y width height key] [game-object-factory x y width height key frame] [game-object-factory x y width height key frame group]), :arglists-meta (nil nil nil)}}, :name phzr.game-object-factory/tile-sprite, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 8, :method-params ([game-object-factory x y width height key] [game-object-factory x y width height key frame] [game-object-factory x y width height key frame group]), :arglists ([game-object-factory x y width height key] [game-object-factory x y width height key frame] [game-object-factory x y width height key frame group]), :arglists-meta (nil nil nil)}, :method-params ([game-object-factory x y width height key] [game-object-factory x y width height key frame] [game-object-factory x y width height key frame group]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 885, :end-line 885, :max-fixed-arity 8, :fn-var true, :arglists ([game-object-factory x y width height key] [game-object-factory x y width height key frame] [game-object-factory x y width height key frame group]), :doc "Creates a new TileSprite object.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) - The x coordinate of the TileSprite. The coordinate is relative to any parent container this TileSprite may be in.\n    * y (number) - The y coordinate of the TileSprite. The coordinate is relative to any parent container this TileSprite may be in.\n    * width (number) - The width of the TileSprite.\n    * height (number) - The height of the TileSprite.\n    * key (string | Phaser.RenderTexture | Phaser.BitmapData | Phaser.Video | PIXI.Texture) - The image used as a texture by this display object during rendering. If a string Phaser will get for an entry in the Image Cache. Or it can be an instance of a RenderTexture, BitmapData, Video or PIXI.Texture.\n    * frame (string | number) {optional} - If a Texture Atlas or Sprite Sheet is used this allows you to specify the frame to be used. Use either an integer for a Frame ID or a string for a frame name.\n    * group (Phaser.Group) {optional} - Optional Group to add the object to. If not specified it will be added to the World group.\n\n  Returns:  Phaser.TileSprite - The newly created TileSprite object."}, graphics {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 378, :column 7, :end-line 378, :end-column 15, :arglists (quote ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y group])), :doc "Creates a new Graphics object.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) {optional} - The x coordinate of the Graphic. The coordinate is relative to any parent container this object may be in.\n    * y (number) {optional} - The y coordinate of the Graphic. The coordinate is relative to any parent container this object may be in.\n    * group (Phaser.Group) {optional} - Optional Group to add the object to. If not specified it will be added to the World group.\n\n  Returns:  Phaser.Graphics - The newly created graphics object.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y group]), :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y group]), :arglists-meta (nil nil nil nil)}}, :name phzr.game-object-factory/graphics, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y group]), :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y group]), :arglists-meta (nil nil nil nil)}, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y group]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 378, :end-line 378, :max-fixed-arity 4, :fn-var true, :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y group]), :doc "Creates a new Graphics object.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) {optional} - The x coordinate of the Graphic. The coordinate is relative to any parent container this object may be in.\n    * y (number) {optional} - The y coordinate of the Graphic. The coordinate is relative to any parent container this object may be in.\n    * group (Phaser.Group) {optional} - Optional Group to add the object to. If not specified it will be added to the World group.\n\n  Returns:  Phaser.Graphics - The newly created graphics object."}, tween {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 979, :column 7, :end-line 979, :end-column 12, :arglists (quote ([game-object-factory object])), :doc "Create a tween on a specific object.\n\n  The object can be any JavaScript object or Phaser object such as Sprite.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * object (object) - Object the tween will be run on.\n\n  Returns:  Phaser.Tween - The newly created Phaser.Tween object."}, :name phzr.game-object-factory/tween, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 12, :method-params ([game-object-factory object]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 979, :end-line 979, :max-fixed-arity 2, :fn-var true, :arglists (quote ([game-object-factory object])), :doc "Create a tween on a specific object.\n\n  The object can be any JavaScript object or Phaser object such as Sprite.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * object (object) - Object the tween will be run on.\n\n  Returns:  Phaser.Tween - The newly created Phaser.Tween object."}, image {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game_object_factory.cljs", :line 453, :column 7, :end-line 453, :end-column 12, :arglists (quote ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key frame] [game-object-factory x y key frame group])), :doc "Create a new `Image` object.\n\n  An Image is a light-weight object you can use to display anything that doesn't need physics or animation.\n\n  It can still rotate, scale, crop and receive input events. \n  This makes it perfect for logos, backgrounds, simple buttons and other non-Sprite graphics.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) {optional} - The x coordinate of the Image. The coordinate is relative to any parent container this Image may be in.\n    * y (number) {optional} - The y coordinate of the Image. The coordinate is relative to any parent container this Image may be in.\n    * key (string | Phaser.RenderTexture | Phaser.BitmapData | Phaser.Video | PIXI.Texture) {optional} - The image used as a texture by this display object during rendering. If a string Phaser will get for an entry in the Image Cache. Or it can be an instance of a RenderTexture, BitmapData, Video or PIXI.Texture.\n    * frame (string | number) {optional} - If a Texture Atlas or Sprite Sheet is used this allows you to specify the frame to be used. Use either an integer for a Frame ID or a string for a frame name.\n    * group (Phaser.Group) {optional} - Optional Group to add the object to. If not specified it will be added to the World group.\n\n  Returns:  Phaser.Image - The newly created Image object.", :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key frame] [game-object-factory x y key frame group]), :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key frame] [game-object-factory x y key frame group]), :arglists-meta (nil nil nil nil nil nil)}}, :name phzr.game-object-factory/image, :variadic false, :file "resources/public/js/compiled/out/phzr/game_object_factory.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key frame] [game-object-factory x y key frame group]), :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key frame] [game-object-factory x y key frame group]), :arglists-meta (nil nil nil nil nil nil)}, :method-params ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key frame] [game-object-factory x y key frame group]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil), :column 1, :line 453, :end-line 453, :max-fixed-arity 6, :fn-var true, :arglists ([game-object-factory] [game-object-factory x] [game-object-factory x y] [game-object-factory x y key] [game-object-factory x y key frame] [game-object-factory x y key frame group]), :doc "Create a new `Image` object.\n\n  An Image is a light-weight object you can use to display anything that doesn't need physics or animation.\n\n  It can still rotate, scale, crop and receive input events. \n  This makes it perfect for logos, backgrounds, simple buttons and other non-Sprite graphics.\n\n  Parameters:\n    * game-object-factory (Phaser.GameObjectFactory) - Targeted instance for method\n    * x (number) {optional} - The x coordinate of the Image. The coordinate is relative to any parent container this Image may be in.\n    * y (number) {optional} - The y coordinate of the Image. The coordinate is relative to any parent container this Image may be in.\n    * key (string | Phaser.RenderTexture | Phaser.BitmapData | Phaser.Video | PIXI.Texture) {optional} - The image used as a texture by this display object during rendering. If a string Phaser will get for an entry in the Image Cache. Or it can be an instance of a RenderTexture, BitmapData, Video or PIXI.Texture.\n    * frame (string | number) {optional} - If a Texture Atlas or Sprite Sheet is used this allows you to specify the frame to be used. Use either an integer for a Frame ID or a string for a frame name.\n    * group (Phaser.Group) {optional} - Optional Group to add the object to. If not specified it will be added to the World group.\n\n  Returns:  Phaser.Image - The newly created Image object."}}, :require-macros nil, :doc nil}