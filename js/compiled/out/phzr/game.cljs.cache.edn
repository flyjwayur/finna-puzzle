{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name phzr.game, :imports nil, :requires {phzr.impl.utils.core phzr.impl.utils.core, ex phzr.impl.extend, phzr.impl.extend phzr.impl.extend, cljsjs.phaser cljsjs.phaser}, :uses {clj->phaser phzr.impl.utils.core, phaser->clj phzr.impl.utils.core}, :defs {->Game {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game.cljs", :line 6, :column 7, :end-line 6, :end-column 13, :arglists (quote ([] [width] [width height] [width height renderer] [width height renderer parent] [width height renderer parent state] [width height renderer parent state transparent] [width height renderer parent state transparent antialias] [width height renderer parent state transparent antialias physics-config])), :doc "This is where the magic happens. The Game object is the heart of your game,\n  providing quick access to common functions and handling the boot process.\n\n  'Hell, there are no rules here - we're trying to accomplish something.'\n                                                        Thomas A. Edison\n\n  Parameters:\n    * width (number | string) {optional} - The width of your game in game pixels. If given as a string the value must be between 0 and 100 and will be used as the percentage width of the parent container, or the browser window if no parent is given.\n    * height (number | string) {optional} - The height of your game in game pixels. If given as a string the value must be between 0 and 100 and will be used as the percentage height of the parent container, or the browser window if no parent is given.\n    * renderer (number) {optional} - Which renderer to use: Phaser.AUTO will auto-detect, Phaser.WEBGL, Phaser.CANVAS or Phaser.HEADLESS (no rendering at all).\n    * parent (string | HTMLElement) {optional} - The DOM element into which this games canvas will be injected. Either a DOM ID (string) or the element itself.\n    * state (object) {optional} - The default state object. A object consisting of Phaser.State functions (preload, create, update, render) or null.\n    * transparent (boolean) {optional} - Use a transparent canvas background or not.\n    * antialias (boolean) {optional} - Draw all image textures anti-aliased or not. The default is for smooth textures, but disable if your game features pixel art.\n    * physics-config (object) {optional} - A physics configuration object to pass to the Physics world on creation.", :top-fn {:variadic false, :max-fixed-arity 8, :method-params ([] [width] [width height] [width height renderer] [width height renderer parent] [width height renderer parent state] [width height renderer parent state transparent] [width height renderer parent state transparent antialias] [width height renderer parent state transparent antialias physics-config]), :arglists ([] [width] [width height] [width height renderer] [width height renderer parent] [width height renderer parent state] [width height renderer parent state transparent] [width height renderer parent state transparent antialias] [width height renderer parent state transparent antialias physics-config]), :arglists-meta (nil nil nil nil nil nil nil nil nil)}}, :name phzr.game/->Game, :variadic false, :file "resources/public/js/compiled/out/phzr/game.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 8, :method-params ([] [width] [width height] [width height renderer] [width height renderer parent] [width height renderer parent state] [width height renderer parent state transparent] [width height renderer parent state transparent antialias] [width height renderer parent state transparent antialias physics-config]), :arglists ([] [width] [width height] [width height renderer] [width height renderer parent] [width height renderer parent state] [width height renderer parent state transparent] [width height renderer parent state transparent antialias] [width height renderer parent state transparent antialias physics-config]), :arglists-meta (nil nil nil nil nil nil nil nil nil)}, :method-params ([] [width] [width height] [width height renderer] [width height renderer parent] [width height renderer parent state] [width height renderer parent state transparent] [width height renderer parent state transparent antialias] [width height renderer parent state transparent antialias physics-config]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil nil nil nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 8, :fn-var true, :arglists ([] [width] [width height] [width height renderer] [width height renderer parent] [width height renderer parent state] [width height renderer parent state transparent] [width height renderer parent state transparent antialias] [width height renderer parent state transparent antialias physics-config]), :doc "This is where the magic happens. The Game object is the heart of your game,\n  providing quick access to common functions and handling the boot process.\n\n  'Hell, there are no rules here - we're trying to accomplish something.'\n                                                        Thomas A. Edison\n\n  Parameters:\n    * width (number | string) {optional} - The width of your game in game pixels. If given as a string the value must be between 0 and 100 and will be used as the percentage width of the parent container, or the browser window if no parent is given.\n    * height (number | string) {optional} - The height of your game in game pixels. If given as a string the value must be between 0 and 100 and will be used as the percentage height of the parent container, or the browser window if no parent is given.\n    * renderer (number) {optional} - Which renderer to use: Phaser.AUTO will auto-detect, Phaser.WEBGL, Phaser.CANVAS or Phaser.HEADLESS (no rendering at all).\n    * parent (string | HTMLElement) {optional} - The DOM element into which this games canvas will be injected. Either a DOM ID (string) or the element itself.\n    * state (object) {optional} - The default state object. A object consisting of Phaser.State functions (preload, create, update, render) or null.\n    * transparent (boolean) {optional} - Use a transparent canvas background or not.\n    * antialias (boolean) {optional} - Draw all image textures anti-aliased or not. The default is for smooth textures, but disable if your game features pixel art.\n    * physics-config (object) {optional} - A physics configuration object to pass to the Physics world on creation."}, destroy {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game.cljs", :line 69, :column 7, :end-line 69, :end-column 14, :arglists (quote ([game])), :doc "Nukes the entire game from orbit."}, :name phzr.game/destroy, :variadic false, :file "resources/public/js/compiled/out/phzr/game.cljs", :end-column 14, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game])), :doc "Nukes the entire game from orbit."}, disable-step {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game.cljs", :line 75, :column 7, :end-line 75, :end-column 19, :arglists (quote ([game])), :doc "Disables core game loop stepping."}, :name phzr.game/disable-step, :variadic false, :file "resources/public/js/compiled/out/phzr/game.cljs", :end-column 19, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game])), :doc "Disables core game loop stepping."}, enable-step {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game.cljs", :line 81, :column 7, :end-line 81, :end-column 18, :arglists (quote ([game])), :doc "Enable core game loop stepping. When enabled you must call game.step() directly (perhaps via a DOM button?)\n  Calling step will advance the game loop by one frame. This is extremely useful for hard to track down errors!"}, :name phzr.game/enable-step, :variadic false, :file "resources/public/js/compiled/out/phzr/game.cljs", :end-column 18, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game])), :doc "Enable core game loop stepping. When enabled you must call game.step() directly (perhaps via a DOM button?)\n  Calling step will advance the game loop by one frame. This is extremely useful for hard to track down errors!"}, step {:protocol-inline nil, :meta {:file "/home/soo/AMP-project/finna/resources/public/js/compiled/out/phzr/game.cljs", :line 88, :column 7, :end-line 88, :end-column 11, :arglists (quote ([game])), :doc "When stepping is enabled you must call this function directly (perhaps via a DOM button?) to advance the game loop by one frame.\n  This is extremely useful to hard to track down errors! Use the internal stepCount property to monitor progress."}, :name phzr.game/step, :variadic false, :file "resources/public/js/compiled/out/phzr/game.cljs", :end-column 11, :method-params ([game]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([game])), :doc "When stepping is enabled you must call this function directly (perhaps via a DOM button?) to advance the game loop by one frame.\n  This is extremely useful to hard to track down errors! Use the internal stepCount property to monitor progress."}}, :require-macros nil, :doc nil}